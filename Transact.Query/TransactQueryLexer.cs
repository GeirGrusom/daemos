//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Repos\ParserGen\ParserGen\TransactQuery.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Transact.Query {

	using System.Linq.Expressions;
	using System.Linq;
	using static System.Linq.Expressions.Expression;
	using System.Reflection;

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class TransactQueryLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, WS=12, QUOTED_STRING=13, SINGLE_QUOTED_STRING=14, GUID_SLASH=15, 
		GUID=16, INT=17, NULL=18, TRUE=19, FALSE=20, AND=21, OR=22, XOR=23, IN=24, 
		INITIALIZED=25, AUTHORIZED=26, COMPLETED=27, CANCELLED=28, FAILED=29, 
		P_YEARS=30, P_MONTHS=31, P_DAYS=32, P_HOURS=33, P_MINUTES=34, P_SECONDS=35, 
		DATETIME=36, DATE=37, NOT_EQ=38, EQ=39, GREATER=40, GREATER_OR_EQUAL=41, 
		LESS=42, LESS_OR_EQUAL=43, NOT=44, SUB=45, ADD=46, ID=47, MUL=48, DIV=49, 
		MOD=50;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "WS", "ESCAPED_QUOTE", "QUOTED_STRING_BODY", "QUOTED_STRING", 
		"ESCAPED_SINGLE_QUOTE", "SINGLE_QUOTED_STRING_BODY", "SINGLE_QUOTED_STRING", 
		"HEX_DIGIT", "HEX_DIGIT_2", "HEX_DIGIT_4", "HEX_DIGIT_8", "GUID_SLASH", 
		"GUID", "INT", "ID_HEAD", "ID_TAIL", "NULL", "TRUE", "FALSE", "AND", "OR", 
		"XOR", "IN", "INITIALIZED", "AUTHORIZED", "COMPLETED", "CANCELLED", "FAILED", 
		"P_YEARS", "P_MONTHS", "P_DAYS", "P_HOURS", "P_MINUTES", "P_SECONDS", 
		"YEAR", "MONTH", "DAY", "HOUR", "MINUTE", "SECOND", "MILLISECOND", "DATE_FRAGMENT", 
		"TIME_FRAGMENT", "DATETIME", "DATE", "NOT_EQ", "EQ", "GREATER", "GREATER_OR_EQUAL", 
		"LESS", "LESS_OR_EQUAL", "NOT", "SUB", "ADD", "ID", "MUL", "DIV", "MOD"
	};


		public ParameterExpression Transaction { get; } = Parameter(typeof(Transaction));
	    public static MemberExpression GetPropertyCI(Expression owner, string name)
	    {
	        return Property(owner, owner.Type.GetProperty(name, System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.GetProperty | System.Reflection.BindingFlags.IgnoreCase | System.Reflection.BindingFlags.Public));
	    }

		private static Expression In(Expression lhs, Expression rhs)
		{
			var method = rhs.Type.GetMethod("Contains", new [] { lhs.Type });

			return Call(rhs, method, lhs);
		}

		private string Unescape(string input, char tokenBarrier)
		{
			var builder = new System.Text.StringBuilder(input.Length);

			bool lastWasSlash = false;
			int lastCodePoint = 0;

			for (int i = 0; i < input.Length; ++i)
			{
				char c = input[i];
				if (c == '\\')
				{
					lastWasSlash = !lastWasSlash;
				}
				else if (lastWasSlash)
				{
					int copyLen = i - lastCodePoint - 1;
					builder.Append(input.Substring(lastCodePoint, copyLen));
				
					if (c == 'n')
					{
						builder.Append('\n');
					}
					else if (c == 'r')
					{
						builder.Append('\r');
					}
					else if (c == tokenBarrier)
					{
						builder.Append(tokenBarrier);
					}
					else if (c == 't')
					{
						builder.Append('\t');
					}
					lastCodePoint = i + 1;
					lastWasSlash = false;
				}
			
			}

			if (lastCodePoint < input.Length)
			{
				builder.Append(input.Substring(lastCodePoint));
			}
			
			return builder.ToString();
		}


	public TransactQueryLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'.'", "'$'", "'e'", "'@'", "'P'", "'T'", "'['", "','", 
		"']'", "' '", null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "'='", "'>'", "'>='", "'<'", "'<='", null, "'-'", 
		"'+'", null, "'*'", "'/'", "'%'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"WS", "QUOTED_STRING", "SINGLE_QUOTED_STRING", "GUID_SLASH", "GUID", "INT", 
		"NULL", "TRUE", "FALSE", "AND", "OR", "XOR", "IN", "INITIALIZED", "AUTHORIZED", 
		"COMPLETED", "CANCELLED", "FAILED", "P_YEARS", "P_MONTHS", "P_DAYS", "P_HOURS", 
		"P_MINUTES", "P_SECONDS", "DATETIME", "DATE", "NOT_EQ", "EQ", "GREATER", 
		"GREATER_OR_EQUAL", "LESS", "LESS_OR_EQUAL", "NOT", "SUB", "ADD", "ID", 
		"MUL", "DIV", "MOD"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TransactQuery.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x34\x1BF\b\x1\x4"+
		"\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b"+
		"\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4"+
		"\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15"+
		"\t\x15\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A"+
		"\x4\x1B\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 "+
		"\t \x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t"+
		")\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31"+
		"\x4\x32\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37"+
		"\t\x37\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4"+
		"?\t?\x4@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45"+
		"\t\x45\x4\x46\t\x46\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3"+
		"\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f"+
		"\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\a\xF\xAD\n\xF\f\xF"+
		"\xE\xF\xB0\v\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x12"+
		"\x3\x12\a\x12\xBB\n\x12\f\x12\xE\x12\xBE\v\x12\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x17\x3"+
		"\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3"+
		"\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3"+
		"\x19\x3\x19\x3\x19\x3\x19\x3\x1A\x6\x1A\xE6\n\x1A\r\x1A\xE\x1A\xE7\x3"+
		"\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3"+
		" \x3 \x3 \x3 \x3!\x3!\x3!\x3\"\x3\"\x3\"\x3\"\x3#\x3#\x3#\x3$\x3$\x3$"+
		"\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3$\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3"+
		"%\x3%\x3%\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3\'\x3\'\x3\'\x3\'"+
		"\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3)\x6)\x13F"+
		"\n)\r)\xE)\x140\x3)\x3)\x3*\x6*\x146\n*\r*\xE*\x147\x3*\x3*\x3+\x6+\x14D"+
		"\n+\r+\xE+\x14E\x3+\x3+\x3,\x6,\x154\n,\r,\xE,\x155\x3,\x3,\x3-\x6-\x15B"+
		"\n-\r-\xE-\x15C\x3-\x3-\x3.\x6.\x162\n.\r.\xE.\x163\x3.\x3.\x3/\x3/\x3"+
		"/\x3/\x3/\x3\x30\x3\x30\x3\x30\x3\x31\x3\x31\x3\x31\x3\x32\x3\x32\x3\x32"+
		"\x3\x33\x3\x33\x3\x33\x3\x34\x3\x34\x3\x34\x3\x35\x3\x35\x3\x35\x3\x35"+
		"\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x37\x3\x37\x3\x37\x3\x37"+
		"\x3\x37\x3\x37\x3\x37\x5\x37\x18D\n\x37\x3\x37\x3\x37\x3\x38\x3\x38\x3"+
		"\x38\x3\x38\x3\x39\x3\x39\x3:\x3:\x3:\x3:\x5:\x19B\n:\x3;\x3;\x3<\x3<"+
		"\x3=\x3=\x3=\x3>\x3>\x3?\x3?\x3?\x3@\x3@\x3@\x3@\x5@\x1AD\n@\x3\x41\x3"+
		"\x41\x3\x42\x3\x42\x3\x43\x3\x43\a\x43\x1B5\n\x43\f\x43\xE\x43\x1B8\v"+
		"\x43\x3\x44\x3\x44\x3\x45\x3\x45\x3\x46\x3\x46\x4\xAE\xBC\x2\x2G\x3\x2"+
		"\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15"+
		"\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\x2\x1D\x2\x2\x1F\x2\xF!\x2\x2#\x2\x2%"+
		"\x2\x10\'\x2\x2)\x2\x2+\x2\x2-\x2\x2/\x2\x11\x31\x2\x12\x33\x2\x13\x35"+
		"\x2\x2\x37\x2\x2\x39\x2\x14;\x2\x15=\x2\x16?\x2\x17\x41\x2\x18\x43\x2"+
		"\x19\x45\x2\x1AG\x2\x1BI\x2\x1CK\x2\x1DM\x2\x1EO\x2\x1FQ\x2 S\x2!U\x2"+
		"\"W\x2#Y\x2$[\x2%]\x2\x2_\x2\x2\x61\x2\x2\x63\x2\x2\x65\x2\x2g\x2\x2i"+
		"\x2\x2k\x2\x2m\x2\x2o\x2&q\x2\'s\x2(u\x2)w\x2*y\x2+{\x2,}\x2-\x7F\x2."+
		"\x81\x2/\x83\x2\x30\x85\x2\x31\x87\x2\x32\x89\x2\x33\x8B\x2\x34\x3\x2"+
		"\x1D\x4\x2\f\f\xF\xF\x5\x2\x32;\x43H\x63h\x3\x2\x32;\x5\x2\x43\\\x61\x61"+
		"\x63|\x6\x2\x32;\x43\\\x61\x61\x63|\x4\x2PPpp\x4\x2WWww\x4\x2NNnn\x4\x2"+
		"VVvv\x4\x2TTtt\x4\x2GGgg\x4\x2HHhh\x4\x2\x43\x43\x63\x63\x4\x2UUuu\x4"+
		"\x2\x46\x46\x66\x66\x4\x2QQqq\x4\x2ZZzz\x4\x2KKkk\x4\x2\\\\||\x4\x2JJ"+
		"jj\x4\x2\x45\x45\x65\x65\x4\x2OOoo\x4\x2RRrr\x3\x2\x32\x33\x3\x2\x32\x35"+
		"\x3\x2\x32\x34\x3\x2\x32\x37\x1BA\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2"+
		"\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2"+
		"\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2"+
		"\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2%\x3\x2"+
		"\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x39\x3"+
		"\x2\x2\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2\x41\x3\x2"+
		"\x2\x2\x2\x43\x3\x2\x2\x2\x2\x45\x3\x2\x2\x2\x2G\x3\x2\x2\x2\x2I\x3\x2"+
		"\x2\x2\x2K\x3\x2\x2\x2\x2M\x3\x2\x2\x2\x2O\x3\x2\x2\x2\x2Q\x3\x2\x2\x2"+
		"\x2S\x3\x2\x2\x2\x2U\x3\x2\x2\x2\x2W\x3\x2\x2\x2\x2Y\x3\x2\x2\x2\x2[\x3"+
		"\x2\x2\x2\x2o\x3\x2\x2\x2\x2q\x3\x2\x2\x2\x2s\x3\x2\x2\x2\x2u\x3\x2\x2"+
		"\x2\x2w\x3\x2\x2\x2\x2y\x3\x2\x2\x2\x2{\x3\x2\x2\x2\x2}\x3\x2\x2\x2\x2"+
		"\x7F\x3\x2\x2\x2\x2\x81\x3\x2\x2\x2\x2\x83\x3\x2\x2\x2\x2\x85\x3\x2\x2"+
		"\x2\x2\x87\x3\x2\x2\x2\x2\x89\x3\x2\x2\x2\x2\x8B\x3\x2\x2\x2\x3\x8D\x3"+
		"\x2\x2\x2\x5\x8F\x3\x2\x2\x2\a\x91\x3\x2\x2\x2\t\x93\x3\x2\x2\x2\v\x95"+
		"\x3\x2\x2\x2\r\x97\x3\x2\x2\x2\xF\x99\x3\x2\x2\x2\x11\x9B\x3\x2\x2\x2"+
		"\x13\x9D\x3\x2\x2\x2\x15\x9F\x3\x2\x2\x2\x17\xA1\x3\x2\x2\x2\x19\xA3\x3"+
		"\x2\x2\x2\x1B\xA7\x3\x2\x2\x2\x1D\xAE\x3\x2\x2\x2\x1F\xB1\x3\x2\x2\x2"+
		"!\xB5\x3\x2\x2\x2#\xBC\x3\x2\x2\x2%\xBF\x3\x2\x2\x2\'\xC3\x3\x2\x2\x2"+
		")\xC5\x3\x2\x2\x2+\xC8\x3\x2\x2\x2-\xCB\x3\x2\x2\x2/\xCE\x3\x2\x2\x2\x31"+
		"\xDB\x3\x2\x2\x2\x33\xE5\x3\x2\x2\x2\x35\xE9\x3\x2\x2\x2\x37\xEB\x3\x2"+
		"\x2\x2\x39\xED\x3\x2\x2\x2;\xF2\x3\x2\x2\x2=\xF7\x3\x2\x2\x2?\xFD\x3\x2"+
		"\x2\x2\x41\x101\x3\x2\x2\x2\x43\x104\x3\x2\x2\x2\x45\x108\x3\x2\x2\x2"+
		"G\x10B\x3\x2\x2\x2I\x117\x3\x2\x2\x2K\x122\x3\x2\x2\x2M\x12C\x3\x2\x2"+
		"\x2O\x136\x3\x2\x2\x2Q\x13E\x3\x2\x2\x2S\x145\x3\x2\x2\x2U\x14C\x3\x2"+
		"\x2\x2W\x153\x3\x2\x2\x2Y\x15A\x3\x2\x2\x2[\x161\x3\x2\x2\x2]\x167\x3"+
		"\x2\x2\x2_\x16C\x3\x2\x2\x2\x61\x16F\x3\x2\x2\x2\x63\x172\x3\x2\x2\x2"+
		"\x65\x175\x3\x2\x2\x2g\x178\x3\x2\x2\x2i\x17B\x3\x2\x2\x2k\x17F\x3\x2"+
		"\x2\x2m\x185\x3\x2\x2\x2o\x190\x3\x2\x2\x2q\x194\x3\x2\x2\x2s\x19A\x3"+
		"\x2\x2\x2u\x19C\x3\x2\x2\x2w\x19E\x3\x2\x2\x2y\x1A0\x3\x2\x2\x2{\x1A3"+
		"\x3\x2\x2\x2}\x1A5\x3\x2\x2\x2\x7F\x1AC\x3\x2\x2\x2\x81\x1AE\x3\x2\x2"+
		"\x2\x83\x1B0\x3\x2\x2\x2\x85\x1B2\x3\x2\x2\x2\x87\x1B9\x3\x2\x2\x2\x89"+
		"\x1BB\x3\x2\x2\x2\x8B\x1BD\x3\x2\x2\x2\x8D\x8E\a*\x2\x2\x8E\x4\x3\x2\x2"+
		"\x2\x8F\x90\a+\x2\x2\x90\x6\x3\x2\x2\x2\x91\x92\a\x30\x2\x2\x92\b\x3\x2"+
		"\x2\x2\x93\x94\a&\x2\x2\x94\n\x3\x2\x2\x2\x95\x96\ag\x2\x2\x96\f\x3\x2"+
		"\x2\x2\x97\x98\a\x42\x2\x2\x98\xE\x3\x2\x2\x2\x99\x9A\aR\x2\x2\x9A\x10"+
		"\x3\x2\x2\x2\x9B\x9C\aV\x2\x2\x9C\x12\x3\x2\x2\x2\x9D\x9E\a]\x2\x2\x9E"+
		"\x14\x3\x2\x2\x2\x9F\xA0\a.\x2\x2\xA0\x16\x3\x2\x2\x2\xA1\xA2\a_\x2\x2"+
		"\xA2\x18\x3\x2\x2\x2\xA3\xA4\a\"\x2\x2\xA4\xA5\x3\x2\x2\x2\xA5\xA6\b\r"+
		"\x2\x2\xA6\x1A\x3\x2\x2\x2\xA7\xA8\a^\x2\x2\xA8\xA9\a$\x2\x2\xA9\x1C\x3"+
		"\x2\x2\x2\xAA\xAD\x5\x1B\xE\x2\xAB\xAD\n\x2\x2\x2\xAC\xAA\x3\x2\x2\x2"+
		"\xAC\xAB\x3\x2\x2\x2\xAD\xB0\x3\x2\x2\x2\xAE\xAF\x3\x2\x2\x2\xAE\xAC\x3"+
		"\x2\x2\x2\xAF\x1E\x3\x2\x2\x2\xB0\xAE\x3\x2\x2\x2\xB1\xB2\a$\x2\x2\xB2"+
		"\xB3\x5\x1D\xF\x2\xB3\xB4\a$\x2\x2\xB4 \x3\x2\x2\x2\xB5\xB6\a^\x2\x2\xB6"+
		"\xB7\a)\x2\x2\xB7\"\x3\x2\x2\x2\xB8\xBB\x5!\x11\x2\xB9\xBB\n\x2\x2\x2"+
		"\xBA\xB8\x3\x2\x2\x2\xBA\xB9\x3\x2\x2\x2\xBB\xBE\x3\x2\x2\x2\xBC\xBD\x3"+
		"\x2\x2\x2\xBC\xBA\x3\x2\x2\x2\xBD$\x3\x2\x2\x2\xBE\xBC\x3\x2\x2\x2\xBF"+
		"\xC0\a)\x2\x2\xC0\xC1\x5#\x12\x2\xC1\xC2\a)\x2\x2\xC2&\x3\x2\x2\x2\xC3"+
		"\xC4\t\x3\x2\x2\xC4(\x3\x2\x2\x2\xC5\xC6\x5\'\x14\x2\xC6\xC7\x5\'\x14"+
		"\x2\xC7*\x3\x2\x2\x2\xC8\xC9\x5)\x15\x2\xC9\xCA\x5)\x15\x2\xCA,\x3\x2"+
		"\x2\x2\xCB\xCC\x5+\x16\x2\xCC\xCD\x5+\x16\x2\xCD.\x3\x2\x2\x2\xCE\xCF"+
		"\a}\x2\x2\xCF\xD0\x5-\x17\x2\xD0\xD1\a/\x2\x2\xD1\xD2\x5+\x16\x2\xD2\xD3"+
		"\a/\x2\x2\xD3\xD4\x5+\x16\x2\xD4\xD5\a/\x2\x2\xD5\xD6\x5+\x16\x2\xD6\xD7"+
		"\a/\x2\x2\xD7\xD8\x5-\x17\x2\xD8\xD9\x5+\x16\x2\xD9\xDA\a\x7F\x2\x2\xDA"+
		"\x30\x3\x2\x2\x2\xDB\xDC\a}\x2\x2\xDC\xDD\x5-\x17\x2\xDD\xDE\x5+\x16\x2"+
		"\xDE\xDF\x5+\x16\x2\xDF\xE0\x5+\x16\x2\xE0\xE1\x5-\x17\x2\xE1\xE2\x5+"+
		"\x16\x2\xE2\xE3\a\x7F\x2\x2\xE3\x32\x3\x2\x2\x2\xE4\xE6\t\x4\x2\x2\xE5"+
		"\xE4\x3\x2\x2\x2\xE6\xE7\x3\x2\x2\x2\xE7\xE5\x3\x2\x2\x2\xE7\xE8\x3\x2"+
		"\x2\x2\xE8\x34\x3\x2\x2\x2\xE9\xEA\t\x5\x2\x2\xEA\x36\x3\x2\x2\x2\xEB"+
		"\xEC\t\x6\x2\x2\xEC\x38\x3\x2\x2\x2\xED\xEE\t\a\x2\x2\xEE\xEF\t\b\x2\x2"+
		"\xEF\xF0\t\t\x2\x2\xF0\xF1\t\t\x2\x2\xF1:\x3\x2\x2\x2\xF2\xF3\t\n\x2\x2"+
		"\xF3\xF4\t\v\x2\x2\xF4\xF5\t\b\x2\x2\xF5\xF6\t\f\x2\x2\xF6<\x3\x2\x2\x2"+
		"\xF7\xF8\t\r\x2\x2\xF8\xF9\t\xE\x2\x2\xF9\xFA\t\t\x2\x2\xFA\xFB\t\xF\x2"+
		"\x2\xFB\xFC\t\f\x2\x2\xFC>\x3\x2\x2\x2\xFD\xFE\t\xE\x2\x2\xFE\xFF\t\a"+
		"\x2\x2\xFF\x100\t\x10\x2\x2\x100@\x3\x2\x2\x2\x101\x102\t\x11\x2\x2\x102"+
		"\x103\t\v\x2\x2\x103\x42\x3\x2\x2\x2\x104\x105\t\x12\x2\x2\x105\x106\t"+
		"\x11\x2\x2\x106\x107\t\v\x2\x2\x107\x44\x3\x2\x2\x2\x108\x109\t\x13\x2"+
		"\x2\x109\x10A\t\a\x2\x2\x10A\x46\x3\x2\x2\x2\x10B\x10C\t\x13\x2\x2\x10C"+
		"\x10D\t\a\x2\x2\x10D\x10E\t\x13\x2\x2\x10E\x10F\t\n\x2\x2\x10F\x110\t"+
		"\x13\x2\x2\x110\x111\t\xE\x2\x2\x111\x112\t\t\x2\x2\x112\x113\t\x13\x2"+
		"\x2\x113\x114\t\x14\x2\x2\x114\x115\t\f\x2\x2\x115\x116\t\x10\x2\x2\x116"+
		"H\x3\x2\x2\x2\x117\x118\t\xE\x2\x2\x118\x119\t\b\x2\x2\x119\x11A\t\n\x2"+
		"\x2\x11A\x11B\t\x15\x2\x2\x11B\x11C\t\x11\x2\x2\x11C\x11D\t\v\x2\x2\x11D"+
		"\x11E\t\x13\x2\x2\x11E\x11F\t\x14\x2\x2\x11F\x120\t\f\x2\x2\x120\x121"+
		"\t\x10\x2\x2\x121J\x3\x2\x2\x2\x122\x123\t\x16\x2\x2\x123\x124\t\x11\x2"+
		"\x2\x124\x125\t\x17\x2\x2\x125\x126\t\x18\x2\x2\x126\x127\t\t\x2\x2\x127"+
		"\x128\t\f\x2\x2\x128\x129\t\n\x2\x2\x129\x12A\t\f\x2\x2\x12A\x12B\t\x10"+
		"\x2\x2\x12BL\x3\x2\x2\x2\x12C\x12D\t\x16\x2\x2\x12D\x12E\t\xE\x2\x2\x12E"+
		"\x12F\t\a\x2\x2\x12F\x130\t\x16\x2\x2\x130\x131\t\f\x2\x2\x131\x132\t"+
		"\t\x2\x2\x132\x133\t\t\x2\x2\x133\x134\t\f\x2\x2\x134\x135\t\x10\x2\x2"+
		"\x135N\x3\x2\x2\x2\x136\x137\t\r\x2\x2\x137\x138\t\xE\x2\x2\x138\x139"+
		"\t\x13\x2\x2\x139\x13A\t\t\x2\x2\x13A\x13B\t\f\x2\x2\x13B\x13C\t\x10\x2"+
		"\x2\x13CP\x3\x2\x2\x2\x13D\x13F\t\x4\x2\x2\x13E\x13D\x3\x2\x2\x2\x13F"+
		"\x140\x3\x2\x2\x2\x140\x13E\x3\x2\x2\x2\x140\x141\x3\x2\x2\x2\x141\x142"+
		"\x3\x2\x2\x2\x142\x143\a[\x2\x2\x143R\x3\x2\x2\x2\x144\x146\t\x4\x2\x2"+
		"\x145\x144\x3\x2\x2\x2\x146\x147\x3\x2\x2\x2\x147\x145\x3\x2\x2\x2\x147"+
		"\x148\x3\x2\x2\x2\x148\x149\x3\x2\x2\x2\x149\x14A\aO\x2\x2\x14AT\x3\x2"+
		"\x2\x2\x14B\x14D\t\x4\x2\x2\x14C\x14B\x3\x2\x2\x2\x14D\x14E\x3\x2\x2\x2"+
		"\x14E\x14C\x3\x2\x2\x2\x14E\x14F\x3\x2\x2\x2\x14F\x150\x3\x2\x2\x2\x150"+
		"\x151\a\x46\x2\x2\x151V\x3\x2\x2\x2\x152\x154\t\x4\x2\x2\x153\x152\x3"+
		"\x2\x2\x2\x154\x155\x3\x2\x2\x2\x155\x153\x3\x2\x2\x2\x155\x156\x3\x2"+
		"\x2\x2\x156\x157\x3\x2\x2\x2\x157\x158\aJ\x2\x2\x158X\x3\x2\x2\x2\x159"+
		"\x15B\t\x4\x2\x2\x15A\x159\x3\x2\x2\x2\x15B\x15C\x3\x2\x2\x2\x15C\x15A"+
		"\x3\x2\x2\x2\x15C\x15D\x3\x2\x2\x2\x15D\x15E\x3\x2\x2\x2\x15E\x15F\aO"+
		"\x2\x2\x15FZ\x3\x2\x2\x2\x160\x162\t\x4\x2\x2\x161\x160\x3\x2\x2\x2\x162"+
		"\x163\x3\x2\x2\x2\x163\x161\x3\x2\x2\x2\x163\x164\x3\x2\x2\x2\x164\x165"+
		"\x3\x2\x2\x2\x165\x166\aU\x2\x2\x166\\\x3\x2\x2\x2\x167\x168\t\x4\x2\x2"+
		"\x168\x169\t\x4\x2\x2\x169\x16A\t\x4\x2\x2\x16A\x16B\t\x4\x2\x2\x16B^"+
		"\x3\x2\x2\x2\x16C\x16D\t\x19\x2\x2\x16D\x16E\t\x4\x2\x2\x16E`\x3\x2\x2"+
		"\x2\x16F\x170\t\x1A\x2\x2\x170\x171\t\x4\x2\x2\x171\x62\x3\x2\x2\x2\x172"+
		"\x173\t\x1B\x2\x2\x173\x174\t\x4\x2\x2\x174\x64\x3\x2\x2\x2\x175\x176"+
		"\t\x1C\x2\x2\x176\x177\t\x4\x2\x2\x177\x66\x3\x2\x2\x2\x178\x179\t\x1C"+
		"\x2\x2\x179\x17A\t\x4\x2\x2\x17Ah\x3\x2\x2\x2\x17B\x17C\t\x4\x2\x2\x17C"+
		"\x17D\t\x4\x2\x2\x17D\x17E\t\x4\x2\x2\x17Ej\x3\x2\x2\x2\x17F\x180\x5]"+
		"/\x2\x180\x181\a/\x2\x2\x181\x182\x5_\x30\x2\x182\x183\a/\x2\x2\x183\x184"+
		"\x5\x61\x31\x2\x184l\x3\x2\x2\x2\x185\x186\x5\x63\x32\x2\x186\x187\a<"+
		"\x2\x2\x187\x188\x5\x65\x33\x2\x188\x189\a<\x2\x2\x189\x18C\x5g\x34\x2"+
		"\x18A\x18B\a\x30\x2\x2\x18B\x18D\x5i\x35\x2\x18C\x18A\x3\x2\x2\x2\x18C"+
		"\x18D\x3\x2\x2\x2\x18D\x18E\x3\x2\x2\x2\x18E\x18F\a\\\x2\x2\x18Fn\x3\x2"+
		"\x2\x2\x190\x191\x5k\x36\x2\x191\x192\aV\x2\x2\x192\x193\x5m\x37\x2\x193"+
		"p\x3\x2\x2\x2\x194\x195\x5k\x36\x2\x195r\x3\x2\x2\x2\x196\x197\a#\x2\x2"+
		"\x197\x19B\a?\x2\x2\x198\x199\a>\x2\x2\x199\x19B\a@\x2\x2\x19A\x196\x3"+
		"\x2\x2\x2\x19A\x198\x3\x2\x2\x2\x19Bt\x3\x2\x2\x2\x19C\x19D\a?\x2\x2\x19D"+
		"v\x3\x2\x2\x2\x19E\x19F\a@\x2\x2\x19Fx\x3\x2\x2\x2\x1A0\x1A1\a@\x2\x2"+
		"\x1A1\x1A2\a?\x2\x2\x1A2z\x3\x2\x2\x2\x1A3\x1A4\a>\x2\x2\x1A4|\x3\x2\x2"+
		"\x2\x1A5\x1A6\a>\x2\x2\x1A6\x1A7\a?\x2\x2\x1A7~\x3\x2\x2\x2\x1A8\x1AD"+
		"\a#\x2\x2\x1A9\x1AA\ap\x2\x2\x1AA\x1AB\aq\x2\x2\x1AB\x1AD\av\x2\x2\x1AC"+
		"\x1A8\x3\x2\x2\x2\x1AC\x1A9\x3\x2\x2\x2\x1AD\x80\x3\x2\x2\x2\x1AE\x1AF"+
		"\a/\x2\x2\x1AF\x82\x3\x2\x2\x2\x1B0\x1B1\a-\x2\x2\x1B1\x84\x3\x2\x2\x2"+
		"\x1B2\x1B6\x5\x35\x1B\x2\x1B3\x1B5\x5\x37\x1C\x2\x1B4\x1B3\x3\x2\x2\x2"+
		"\x1B5\x1B8\x3\x2\x2\x2\x1B6\x1B4\x3\x2\x2\x2\x1B6\x1B7\x3\x2\x2\x2\x1B7"+
		"\x86\x3\x2\x2\x2\x1B8\x1B6\x3\x2\x2\x2\x1B9\x1BA\a,\x2\x2\x1BA\x88\x3"+
		"\x2\x2\x2\x1BB\x1BC\a\x31\x2\x2\x1BC\x8A\x3\x2\x2\x2\x1BD\x1BE\a\'\x2"+
		"\x2\x1BE\x8C\x3\x2\x2\x2\x12\x2\xAC\xAE\xBA\xBC\xE7\x140\x147\x14E\x155"+
		"\x15C\x163\x18C\x19A\x1AC\x1B6\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Transact.Query
