//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Repos\ParserGen\ParserGen\TransactQuery.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Transact.Query {

	using System.Linq.Expressions;
	using System.Linq;
	using static System.Linq.Expressions.Expression;
	using System.Reflection;

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class TransactQueryParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		WS=10, QUOTED_STRING=11, SINGLE_QUOTED_STRING=12, GUID_SLASH=13, GUID=14, 
		INT=15, NULL=16, TRUE=17, FALSE=18, AND=19, OR=20, XOR=21, IN=22, INITIALIZED=23, 
		AUTHORIZED=24, COMPLETED=25, CANCELLED=26, FAILED=27, DATETIME=28, DATE=29, 
		NOT_EQ=30, EQ=31, GREATER=32, GREATER_OR_EQUAL=33, LESS=34, LESS_OR_EQUAL=35, 
		NOT=36, SUB=37, ADD=38, ID=39, MUL=40, DIV=41, MOD=42;
	public const int
		RULE_compileUnit = 0, RULE_logicalExpression = 1, RULE_containmentExpression = 2, 
		RULE_orExpression = 3, RULE_xorExpression = 4, RULE_andExpression = 5, 
		RULE_equalityExpression = 6, RULE_comparisonExpression = 7, RULE_additiveExpression = 8, 
		RULE_multiplicativeExpression = 9, RULE_unaryExpression = 10, RULE_expression = 11, 
		RULE_literalExpression = 12, RULE_identifierChain = 13, RULE_constant = 14, 
		RULE_identifier = 15, RULE_quotedString = 16, RULE_singleQuotedString = 17, 
		RULE_float = 18, RULE_integer = 19, RULE_exponent = 20, RULE_boolean = 21, 
		RULE_null = 22, RULE_guid = 23, RULE_date = 24, RULE_array = 25;
	public static readonly string[] ruleNames = {
		"compileUnit", "logicalExpression", "containmentExpression", "orExpression", 
		"xorExpression", "andExpression", "equalityExpression", "comparisonExpression", 
		"additiveExpression", "multiplicativeExpression", "unaryExpression", "expression", 
		"literalExpression", "identifierChain", "constant", "identifier", "quotedString", 
		"singleQuotedString", "float", "integer", "exponent", "boolean", "null", 
		"guid", "date", "array"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'.'", "'$'", "'e'", "'@'", "'['", "','", "']'", "' '", 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "'='", "'>'", "'>='", 
		"'<'", "'<='", null, "'-'", "'+'", null, "'*'", "'/'", "'%'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "WS", "QUOTED_STRING", 
		"SINGLE_QUOTED_STRING", "GUID_SLASH", "GUID", "INT", "NULL", "TRUE", "FALSE", 
		"AND", "OR", "XOR", "IN", "INITIALIZED", "AUTHORIZED", "COMPLETED", "CANCELLED", 
		"FAILED", "DATETIME", "DATE", "NOT_EQ", "EQ", "GREATER", "GREATER_OR_EQUAL", 
		"LESS", "LESS_OR_EQUAL", "NOT", "SUB", "ADD", "ID", "MUL", "DIV", "MOD"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TransactQuery.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }


		public ParameterExpression Transaction { get; } = Parameter(typeof(Transaction));
	    public static MemberExpression GetPropertyCI(Expression owner, string name)
	    {
	        return Property(owner, owner.Type.GetProperty(name, System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.GetProperty | System.Reflection.BindingFlags.IgnoreCase | System.Reflection.BindingFlags.Public));
	    }

        private static readonly MethodInfo[] EnumerableMethods = typeof(Enumerable).GetMethods();
        private static readonly MethodInfo Contains2 = EnumerableMethods.Single(x => x.Name == "Contains" && x.GetParameters().Length == 2);
        

		private static Expression In(Expression lhs, Expression rhs)
		{

            MethodInfo method;

            var rhsType = rhs.Type;
            System.Type elementType;
            if(rhs.Type.IsArray)
            {
                elementType = rhs.Type.GetElementType();
            }
            else
            {
                elementType = rhs.Type.GetGenericArguments()[0];
            }

            
            method = Contains2.MakeGenericMethod(rhs.Type.GetElementType());

            return Call(method, rhs, lhs);
		}

	public TransactQueryParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public Expression expr;
		public ExpressionContext _expression;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(TransactQueryParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			State = 58;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 52; _localctx._expression = expression();
				 _localctx.expr =  _localctx._expression.expr; 
				State = 54; Match(Eof);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 56; Match(Eof);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalExpressionContext : ParserRuleContext {
		public Expression expr;
		public ContainmentExpressionContext _containmentExpression;
		public ContainmentExpressionContext containmentExpression() {
			return GetRuleContext<ContainmentExpressionContext>(0);
		}
		public LogicalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalExpression; } }
	}

	[RuleVersion(0)]
	public LogicalExpressionContext logicalExpression() {
		LogicalExpressionContext _localctx = new LogicalExpressionContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_logicalExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; _localctx._containmentExpression = containmentExpression(0);
			 _localctx.expr =  _localctx._containmentExpression.expr; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContainmentExpressionContext : ParserRuleContext {
		public Expression expr;
		public ContainmentExpressionContext lhs;
		public OrExpressionContext _orExpression;
		public OrExpressionContext rhs;
		public ITerminalNode IN() { return GetToken(TransactQueryParser.IN, 0); }
		public ContainmentExpressionContext containmentExpression() {
			return GetRuleContext<ContainmentExpressionContext>(0);
		}
		public OrExpressionContext orExpression() {
			return GetRuleContext<OrExpressionContext>(0);
		}
		public ContainmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_containmentExpression; } }
	}

	[RuleVersion(0)]
	public ContainmentExpressionContext containmentExpression() {
		return containmentExpression(0);
	}

	private ContainmentExpressionContext containmentExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ContainmentExpressionContext _localctx = new ContainmentExpressionContext(_ctx, _parentState);
		ContainmentExpressionContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_containmentExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 64; _localctx._orExpression = orExpression(0);
			 _localctx.expr =  _localctx._orExpression.expr; 
			}
			_ctx.stop = _input.Lt(-1);
			State = 74;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ContainmentExpressionContext(_parentctx, _parentState);
					_localctx.lhs = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_containmentExpression);
					State = 67;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 68; Match(IN);
					State = 69; _localctx.rhs = _localctx._orExpression = orExpression(0);
					 _localctx.expr =  In(_localctx.lhs.expr, _localctx.rhs.expr); 
					}
					} 
				}
				State = 76;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class OrExpressionContext : ParserRuleContext {
		public Expression expr;
		public OrExpressionContext lhs;
		public XorExpressionContext _xorExpression;
		public XorExpressionContext rhs;
		public ITerminalNode OR() { return GetToken(TransactQueryParser.OR, 0); }
		public OrExpressionContext orExpression() {
			return GetRuleContext<OrExpressionContext>(0);
		}
		public XorExpressionContext xorExpression() {
			return GetRuleContext<XorExpressionContext>(0);
		}
		public OrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orExpression; } }
	}

	[RuleVersion(0)]
	public OrExpressionContext orExpression() {
		return orExpression(0);
	}

	private OrExpressionContext orExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		OrExpressionContext _localctx = new OrExpressionContext(_ctx, _parentState);
		OrExpressionContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_orExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 78; _localctx._xorExpression = xorExpression(0);
			 _localctx.expr =  _localctx._xorExpression.expr; 
			}
			_ctx.stop = _input.Lt(-1);
			State = 88;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new OrExpressionContext(_parentctx, _parentState);
					_localctx.lhs = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_orExpression);
					State = 81;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 82; Match(OR);
					State = 83; _localctx.rhs = _localctx._xorExpression = xorExpression(0);
					 _localctx.expr =  OrElse(_localctx.lhs.expr, _localctx.rhs.expr); 
					}
					} 
				}
				State = 90;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class XorExpressionContext : ParserRuleContext {
		public Expression expr;
		public XorExpressionContext lhs;
		public AndExpressionContext _andExpression;
		public AndExpressionContext rhs;
		public ITerminalNode XOR() { return GetToken(TransactQueryParser.XOR, 0); }
		public XorExpressionContext xorExpression() {
			return GetRuleContext<XorExpressionContext>(0);
		}
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public XorExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xorExpression; } }
	}

	[RuleVersion(0)]
	public XorExpressionContext xorExpression() {
		return xorExpression(0);
	}

	private XorExpressionContext xorExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		XorExpressionContext _localctx = new XorExpressionContext(_ctx, _parentState);
		XorExpressionContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_xorExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 92; _localctx._andExpression = andExpression(0);
			 _localctx.expr =  _localctx._andExpression.expr; 
			}
			_ctx.stop = _input.Lt(-1);
			State = 102;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new XorExpressionContext(_parentctx, _parentState);
					_localctx.lhs = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_xorExpression);
					State = 95;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 96; Match(XOR);
					State = 97; _localctx.rhs = _localctx._andExpression = andExpression(0);
					 _localctx.expr =  ExclusiveOr(_localctx.lhs.expr, _localctx.rhs.expr); 
					}
					} 
				}
				State = 104;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		public Expression expr;
		public AndExpressionContext lhs;
		public EqualityExpressionContext _equalityExpression;
		public EqualityExpressionContext rhs;
		public ITerminalNode AND() { return GetToken(TransactQueryParser.AND, 0); }
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		return andExpression(0);
	}

	private AndExpressionContext andExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		AndExpressionContext _localctx = new AndExpressionContext(_ctx, _parentState);
		AndExpressionContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_andExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 106; _localctx._equalityExpression = equalityExpression(0);
			 _localctx.expr =  _localctx._equalityExpression.expr; 
			}
			_ctx.stop = _input.Lt(-1);
			State = 116;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AndExpressionContext(_parentctx, _parentState);
					_localctx.lhs = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_andExpression);
					State = 109;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 110; Match(AND);
					State = 111; _localctx.rhs = _localctx._equalityExpression = equalityExpression(0);
					 _localctx.expr =  AndAlso(_localctx.lhs.expr, _localctx.rhs.expr); 
					}
					} 
				}
				State = 118;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		public Expression expr;
		public EqualityExpressionContext lhs;
		public ComparisonExpressionContext _comparisonExpression;
		public ComparisonExpressionContext rhs;
		public ITerminalNode EQ() { return GetToken(TransactQueryParser.EQ, 0); }
		public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public ComparisonExpressionContext comparisonExpression() {
			return GetRuleContext<ComparisonExpressionContext>(0);
		}
		public ITerminalNode NOT_EQ() { return GetToken(TransactQueryParser.NOT_EQ, 0); }
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		return equalityExpression(0);
	}

	private EqualityExpressionContext equalityExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		EqualityExpressionContext _localctx = new EqualityExpressionContext(_ctx, _parentState);
		EqualityExpressionContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_equalityExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 120; _localctx._comparisonExpression = comparisonExpression(0);
			 _localctx.expr =  _localctx._comparisonExpression.expr; 
			}
			_ctx.stop = _input.Lt(-1);
			State = 135;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 133;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
					case 1:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						_localctx.lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 123;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 124; Match(EQ);
						State = 125; _localctx.rhs = _localctx._comparisonExpression = comparisonExpression(0);

						          		if(_localctx.lhs.expr.Type == typeof(JsonValue) || _localctx.rhs.expr.Type == typeof(JsonValue)) {
						          			_localctx.expr =  Equal(_localctx.lhs.expr, _localctx.rhs.expr, false,  typeof(JsonValue).GetMethod("Equals", new [] { _localctx.lhs.expr.Type, _localctx.rhs.expr.Type }));
						          		}
						          		else { 
						          			_localctx.expr =  Equal(_localctx.lhs.expr, _localctx.rhs.expr);
						          		}
						          				
						          	
						}
						break;

					case 2:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						_localctx.lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 128;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 129; Match(NOT_EQ);
						State = 130; _localctx.rhs = _localctx._comparisonExpression = comparisonExpression(0);

						          					_localctx.expr =  NotEqual(_localctx.lhs.expr, _localctx.rhs.expr);
						          	
						}
						break;
					}
					} 
				}
				State = 137;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ComparisonExpressionContext : ParserRuleContext {
		public Expression expr;
		public ComparisonExpressionContext lhs;
		public AdditiveExpressionContext _additiveExpression;
		public AdditiveExpressionContext rhs;
		public ITerminalNode GREATER() { return GetToken(TransactQueryParser.GREATER, 0); }
		public ComparisonExpressionContext comparisonExpression() {
			return GetRuleContext<ComparisonExpressionContext>(0);
		}
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public ITerminalNode GREATER_OR_EQUAL() { return GetToken(TransactQueryParser.GREATER_OR_EQUAL, 0); }
		public ITerminalNode LESS() { return GetToken(TransactQueryParser.LESS, 0); }
		public ITerminalNode LESS_OR_EQUAL() { return GetToken(TransactQueryParser.LESS_OR_EQUAL, 0); }
		public ComparisonExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonExpression; } }
	}

	[RuleVersion(0)]
	public ComparisonExpressionContext comparisonExpression() {
		return comparisonExpression(0);
	}

	private ComparisonExpressionContext comparisonExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ComparisonExpressionContext _localctx = new ComparisonExpressionContext(_ctx, _parentState);
		ComparisonExpressionContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_comparisonExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 139; _localctx._additiveExpression = additiveExpression(0);
			 _localctx.expr =  _localctx._additiveExpression.expr; 
			}
			_ctx.stop = _input.Lt(-1);
			State = 164;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 162;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
					case 1:
						{
						_localctx = new ComparisonExpressionContext(_parentctx, _parentState);
						_localctx.lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_comparisonExpression);
						State = 142;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 143; Match(GREATER);
						State = 144; _localctx.rhs = _localctx._additiveExpression = additiveExpression(0);

						          		_localctx.expr =  GreaterThan(_localctx.lhs.expr, _localctx.rhs.expr);
						          	
						}
						break;

					case 2:
						{
						_localctx = new ComparisonExpressionContext(_parentctx, _parentState);
						_localctx.lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_comparisonExpression);
						State = 147;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 148; Match(GREATER_OR_EQUAL);
						State = 149; _localctx.rhs = _localctx._additiveExpression = additiveExpression(0);

						          		_localctx.expr =  GreaterThanOrEqual(_localctx.lhs.expr, _localctx.rhs.expr);
						          	
						}
						break;

					case 3:
						{
						_localctx = new ComparisonExpressionContext(_parentctx, _parentState);
						_localctx.lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_comparisonExpression);
						State = 152;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 153; Match(LESS);
						State = 154; _localctx.rhs = _localctx._additiveExpression = additiveExpression(0);

						          		_localctx.expr =  LessThan(_localctx.lhs.expr, _localctx.rhs.expr);
						          	
						}
						break;

					case 4:
						{
						_localctx = new ComparisonExpressionContext(_parentctx, _parentState);
						_localctx.lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_comparisonExpression);
						State = 157;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 158; Match(LESS_OR_EQUAL);
						State = 159; _localctx.rhs = _localctx._additiveExpression = additiveExpression(0);

						          		_localctx.expr =  LessThanOrEqual(_localctx.lhs.expr, _localctx.rhs.expr);
						          	
						}
						break;
					}
					} 
				}
				State = 166;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		public Expression expr;
		public AdditiveExpressionContext lhs;
		public MultiplicativeExpressionContext _multiplicativeExpression;
		public MultiplicativeExpressionContext rhs;
		public ITerminalNode ADD() { return GetToken(TransactQueryParser.ADD, 0); }
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public ITerminalNode SUB() { return GetToken(TransactQueryParser.SUB, 0); }
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		return additiveExpression(0);
	}

	private AdditiveExpressionContext additiveExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(_ctx, _parentState);
		AdditiveExpressionContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_additiveExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 168; _localctx._multiplicativeExpression = multiplicativeExpression(0);
			 _localctx.expr =  _localctx._multiplicativeExpression.expr; 
			}
			_ctx.stop = _input.Lt(-1);
			State = 183;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 181;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
					case 1:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						_localctx.lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 171;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 172; Match(ADD);
						State = 173; _localctx.rhs = _localctx._multiplicativeExpression = multiplicativeExpression(0);

						          		_localctx.expr =  Add(_localctx.lhs.expr, _localctx.rhs.expr);
						          	
						}
						break;

					case 2:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						_localctx.lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 176;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 177; Match(SUB);
						State = 178; _localctx.rhs = _localctx._multiplicativeExpression = multiplicativeExpression(0);

						          		_localctx.expr =  Subtract(_localctx.lhs.expr, _localctx.rhs.expr);
						          	
						}
						break;
					}
					} 
				}
				State = 185;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		public Expression expr;
		public MultiplicativeExpressionContext lhs;
		public UnaryExpressionContext _unaryExpression;
		public UnaryExpressionContext rhs;
		public ITerminalNode MUL() { return GetToken(TransactQueryParser.MUL, 0); }
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public ITerminalNode DIV() { return GetToken(TransactQueryParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(TransactQueryParser.MOD, 0); }
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		return multiplicativeExpression(0);
	}

	private MultiplicativeExpressionContext multiplicativeExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(_ctx, _parentState);
		MultiplicativeExpressionContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_multiplicativeExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 187; _localctx._unaryExpression = unaryExpression();
			 _localctx.expr =  _localctx._unaryExpression.expr; 
			}
			_ctx.stop = _input.Lt(-1);
			State = 207;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 205;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						_localctx.lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 190;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 191; Match(MUL);
						State = 192; _localctx.rhs = _localctx._unaryExpression = unaryExpression();

						          		_localctx.expr =  Multiply(_localctx.lhs.expr, _localctx.rhs.expr);
						          	
						}
						break;

					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						_localctx.lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 195;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 196; Match(DIV);
						State = 197; _localctx.rhs = _localctx._unaryExpression = unaryExpression();

						          		_localctx.expr =  Divide(_localctx.lhs.expr, _localctx.rhs.expr);
						          	
						}
						break;

					case 3:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						_localctx.lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 200;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 201; Match(MOD);
						State = 202; _localctx.rhs = _localctx._unaryExpression = unaryExpression();

						          		_localctx.expr =  Modulo(_localctx.lhs.expr, _localctx.rhs.expr);
						          	
						}
						break;
					}
					} 
				}
				State = 209;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public Expression expr;
		public UnaryExpressionContext _unaryExpression;
		public ExpressionContext _expression;
		public LiteralExpressionContext _literalExpression;
		public ITerminalNode NOT() { return GetToken(TransactQueryParser.NOT, 0); }
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public ITerminalNode SUB() { return GetToken(TransactQueryParser.SUB, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LiteralExpressionContext literalExpression() {
			return GetRuleContext<LiteralExpressionContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_unaryExpression);
		try {
			State = 226;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 210; Match(NOT);
				State = 211; _localctx._unaryExpression = unaryExpression();
				 
						_localctx.expr =  Not(_localctx.expr);
					
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 214; Match(SUB);
				State = 215; _localctx._unaryExpression = unaryExpression();

						_localctx.expr =  Negate(_localctx.expr);
					
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 218; Match(T__0);
				State = 219; _localctx._expression = expression();
				 _localctx.expr =  _localctx._expression.expr; 
				State = 221; Match(T__1);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 223; _localctx._literalExpression = literalExpression();
				 _localctx.expr =  _localctx._literalExpression.expr; 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public Expression expr;
		public LogicalExpressionContext _logicalExpression;
		public LogicalExpressionContext logicalExpression() {
			return GetRuleContext<LogicalExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228; _localctx._logicalExpression = logicalExpression();
			 _localctx.expr =  _localctx._logicalExpression.expr; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralExpressionContext : ParserRuleContext {
		public Expression expr;
		public FloatContext _float;
		public IntegerContext _integer;
		public QuotedStringContext _quotedString;
		public SingleQuotedStringContext _singleQuotedString;
		public DateContext _date;
		public GuidContext _guid;
		public IdentifierChainContext _identifierChain;
		public ArrayContext _array;
		public FloatContext @float() {
			return GetRuleContext<FloatContext>(0);
		}
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public QuotedStringContext quotedString() {
			return GetRuleContext<QuotedStringContext>(0);
		}
		public SingleQuotedStringContext singleQuotedString() {
			return GetRuleContext<SingleQuotedStringContext>(0);
		}
		public DateContext date() {
			return GetRuleContext<DateContext>(0);
		}
		public GuidContext guid() {
			return GetRuleContext<GuidContext>(0);
		}
		public IdentifierChainContext identifierChain() {
			return GetRuleContext<IdentifierChainContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public LiteralExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalExpression; } }
	}

	[RuleVersion(0)]
	public LiteralExpressionContext literalExpression() {
		LiteralExpressionContext _localctx = new LiteralExpressionContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_literalExpression);
		try {
			State = 255;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 231; _localctx._float = @float();
				 _localctx.expr =  Constant(_localctx._float.value, typeof(float));
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 234; _localctx._integer = integer();
				 _localctx.expr =  Constant(_localctx._integer.value, typeof(int)); 
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 237; _localctx._quotedString = quotedString();
				 _localctx.expr =  Constant(_localctx._quotedString.value, typeof(string)); 
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 240; _localctx._singleQuotedString = singleQuotedString();
				 _localctx.expr =  Constant(_localctx._singleQuotedString.value, typeof(string)); 
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 243; _localctx._date = date();
				 _localctx.expr =  Constant(_localctx._date.value, typeof(System.DateTime)); 
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 246; _localctx._guid = guid();
				 _localctx.expr =  Constant(_localctx._guid.value, typeof(System.Guid)); 
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 249; _localctx._identifierChain = identifierChain();
				 _localctx.expr =  _localctx._identifierChain.expr; 
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 252; _localctx._array = array();
				 _localctx.expr =  _localctx._array.expr; 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierChainContext : ParserRuleContext {
		public Expression expr;
		public ConstantContext _constant;
		public IdentifierContext _identifier;
		public IdentifierContext owner;
		public IdentifierContext member;
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public IdentifierChainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierChain; } }
	}

	[RuleVersion(0)]
	public IdentifierChainContext identifierChain() {
		IdentifierChainContext _localctx = new IdentifierChainContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_identifierChain);
		try {
			State = 268;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 257; _localctx._constant = constant();
				 _localctx.expr =  _localctx._constant.expr; 
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 260; _localctx._identifier = identifier();

						_localctx.expr =  GetPropertyCI(Transaction, _localctx._identifier.value);
					
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 263; _localctx.owner = identifier();
				State = 264; Match(T__2);
				State = 265; _localctx.member = identifier();

							string dynamicObject = _localctx.owner.value;
							string memberName = _localctx.member.value;
							var ctor = typeof(Transact.JsonValue).GetConstructor(new[] { typeof(IDictionary<string, object>), typeof(string), typeof(string) });
							_localctx.expr =   New(ctor, Convert(GetPropertyCI(Transaction, dynamicObject), typeof(IDictionary<string, object>)), Constant(dynamicObject), Constant(memberName));
					
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public Expression expr;
		public ITerminalNode NULL() { return GetToken(TransactQueryParser.NULL, 0); }
		public ITerminalNode TRUE() { return GetToken(TransactQueryParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(TransactQueryParser.FALSE, 0); }
		public ITerminalNode INITIALIZED() { return GetToken(TransactQueryParser.INITIALIZED, 0); }
		public ITerminalNode AUTHORIZED() { return GetToken(TransactQueryParser.AUTHORIZED, 0); }
		public ITerminalNode COMPLETED() { return GetToken(TransactQueryParser.COMPLETED, 0); }
		public ITerminalNode CANCELLED() { return GetToken(TransactQueryParser.CANCELLED, 0); }
		public ITerminalNode FAILED() { return GetToken(TransactQueryParser.FAILED, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_constant);
		try {
			State = 286;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 270; Match(NULL);
				 _localctx.expr =  Constant(null); 
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 272; Match(TRUE);
				 _localctx.expr =  Constant(true); 
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 274; Match(FALSE);
				 _localctx.expr =  Constant(false); 
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 276; Match(INITIALIZED);
				 _localctx.expr =  Constant(TransactionState.Initialized); 
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 278; Match(AUTHORIZED);
				 _localctx.expr =  Constant(TransactionState.Authorized); 
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 280; Match(COMPLETED);
				_localctx.expr =  Constant(TransactionState.Completed); 
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 282; Match(CANCELLED);
				 _localctx.expr =  Constant(TransactionState.Cancelled); 
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 284; Match(FAILED);
				 _localctx.expr =  Constant(TransactionState.Failed); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public string value;
		public QuotedStringContext _quotedString;
		public SingleQuotedStringContext _singleQuotedString;
		public IToken _ID;
		public QuotedStringContext quotedString() {
			return GetRuleContext<QuotedStringContext>(0);
		}
		public SingleQuotedStringContext singleQuotedString() {
			return GetRuleContext<SingleQuotedStringContext>(0);
		}
		public ITerminalNode ID() { return GetToken(TransactQueryParser.ID, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_identifier);
		try {
			State = 298;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 288; Match(T__3);
				State = 289; _localctx._quotedString = quotedString();
				 _localctx.value =  _localctx._quotedString.value; 
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 292; Match(T__3);
				State = 293; _localctx._singleQuotedString = singleQuotedString();
				 _localctx.value =  _localctx._singleQuotedString.value; 
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 296; _localctx._ID = Match(ID);
				 _localctx.value =  (_localctx._ID!=null?_localctx._ID.Text:null); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuotedStringContext : ParserRuleContext {
		public string value;
		public IToken _QUOTED_STRING;
		public ITerminalNode QUOTED_STRING() { return GetToken(TransactQueryParser.QUOTED_STRING, 0); }
		public QuotedStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quotedString; } }
	}

	[RuleVersion(0)]
	public QuotedStringContext quotedString() {
		QuotedStringContext _localctx = new QuotedStringContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_quotedString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300; _localctx._QUOTED_STRING = Match(QUOTED_STRING);
			 _localctx.value =  (_localctx._QUOTED_STRING!=null?_localctx._QUOTED_STRING.Text:null).Substring(1, (_localctx._QUOTED_STRING!=null?_localctx._QUOTED_STRING.Text:null).Length - 2); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleQuotedStringContext : ParserRuleContext {
		public string value;
		public IToken _SINGLE_QUOTED_STRING;
		public ITerminalNode SINGLE_QUOTED_STRING() { return GetToken(TransactQueryParser.SINGLE_QUOTED_STRING, 0); }
		public SingleQuotedStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleQuotedString; } }
	}

	[RuleVersion(0)]
	public SingleQuotedStringContext singleQuotedString() {
		SingleQuotedStringContext _localctx = new SingleQuotedStringContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_singleQuotedString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303; _localctx._SINGLE_QUOTED_STRING = Match(SINGLE_QUOTED_STRING);
			 _localctx.value =  (_localctx._SINGLE_QUOTED_STRING!=null?_localctx._SINGLE_QUOTED_STRING.Text:null).Substring(1, (_localctx._SINGLE_QUOTED_STRING!=null?_localctx._SINGLE_QUOTED_STRING.Text:null).Length - 2); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatContext : ParserRuleContext {
		public double value;
		public ITerminalNode[] INT() { return GetTokens(TransactQueryParser.INT); }
		public ITerminalNode INT(int i) {
			return GetToken(TransactQueryParser.INT, i);
		}
		public ExponentContext exponent() {
			return GetRuleContext<ExponentContext>(0);
		}
		public FloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float; } }
	}

	[RuleVersion(0)]
	public FloatContext @float() {
		FloatContext _localctx = new FloatContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_float);
		try {
			State = 328;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 306; Match(INT);
				State = 307; Match(T__2);
				State = 308; Match(INT);
				State = 309; exponent();
				 _localctx.value =  double.Parse(_localctx.GetText(), System.Globalization.CultureInfo.InvariantCulture); 
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 312; Match(T__2);
				State = 313; Match(INT);
				State = 314; exponent();
				 _localctx.value =  double.Parse(_localctx.GetText(), System.Globalization.CultureInfo.InvariantCulture); 
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 317; Match(INT);
				State = 318; exponent();
				 _localctx.value =  double.Parse(_localctx.GetText(), System.Globalization.CultureInfo.InvariantCulture); 
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 321; Match(INT);
				State = 322; Match(T__2);
				State = 323; Match(INT);
				 _localctx.value =  double.Parse(_localctx.GetText(), System.Globalization.CultureInfo.InvariantCulture); 
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 325; Match(T__2);
				State = 326; Match(INT);
				 _localctx.value =  double.Parse(_localctx.GetText(), System.Globalization.CultureInfo.InvariantCulture); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		public int value;
		public IToken _INT;
		public ITerminalNode INT() { return GetToken(TransactQueryParser.INT, 0); }
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_integer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330; _localctx._INT = Match(INT);
			 _localctx.value =  int.Parse((_localctx._INT!=null?_localctx._INT.Text:null), System.Globalization.CultureInfo.InvariantCulture); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExponentContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(TransactQueryParser.INT, 0); }
		public ITerminalNode ADD() { return GetToken(TransactQueryParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(TransactQueryParser.SUB, 0); }
		public ExponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exponent; } }
	}

	[RuleVersion(0)]
	public ExponentContext exponent() {
		ExponentContext _localctx = new ExponentContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_exponent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333; Match(T__4);
			State = 334;
			_la = _input.La(1);
			if ( !(_la==SUB || _la==ADD) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			State = 335; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		public bool value;
		public ITerminalNode TRUE() { return GetToken(TransactQueryParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(TransactQueryParser.FALSE, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_boolean);
		try {
			State = 341;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 337; Match(TRUE);
				 _localctx.value =  true; 
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 339; Match(FALSE);
				 _localctx.value =  false; 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullContext : ParserRuleContext {
		public object value;
		public ITerminalNode NULL() { return GetToken(TransactQueryParser.NULL, 0); }
		public NullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null; } }
	}

	[RuleVersion(0)]
	public NullContext @null() {
		NullContext _localctx = new NullContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_null);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343; Match(NULL);
			 _localctx.value =  null; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GuidContext : ParserRuleContext {
		public System.Guid value;
		public ITerminalNode GUID_SLASH() { return GetToken(TransactQueryParser.GUID_SLASH, 0); }
		public ITerminalNode GUID() { return GetToken(TransactQueryParser.GUID, 0); }
		public GuidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_guid; } }
	}

	[RuleVersion(0)]
	public GuidContext guid() {
		GuidContext _localctx = new GuidContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_guid);
		try {
			State = 350;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 346; Match(GUID_SLASH);
				 _localctx.value =  System.Guid.Parse(_localctx.GetText()); 
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 348; Match(GUID);
				 _localctx.value =  System.Guid.Parse(_localctx.GetText()); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateContext : ParserRuleContext {
		public System.DateTime value;
		public IToken _DATE;
		public IToken _DATETIME;
		public ITerminalNode DATE() { return GetToken(TransactQueryParser.DATE, 0); }
		public ITerminalNode DATETIME() { return GetToken(TransactQueryParser.DATETIME, 0); }
		public DateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date; } }
	}

	[RuleVersion(0)]
	public DateContext date() {
		DateContext _localctx = new DateContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_date);
		try {
			State = 358;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 352; Match(T__5);
				State = 353; _localctx._DATE = Match(DATE);
				 _localctx.value =  System.DateTime.ParseExact((_localctx._DATE!=null?_localctx._DATE.Text:null), "yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture); 
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 355; Match(T__5);
				State = 356; _localctx._DATETIME = Match(DATETIME);
				 _localctx.value =  System.DateTime.ParseExact((_localctx._DATETIME!=null?_localctx._DATETIME.Text:null), new [] { "yyyy-MM-dd'T'HH:mm:ss", "yyyy-MM-dd'T'HH:mm:ss.fff" }, System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.AssumeUniversal); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public Expression expr;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _members = new List<ExpressionContext>();
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_array);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 360; Match(T__6);
			State = 369;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
			case 1:
				{
				State = 361; _localctx._expression = expression();
				_localctx._members.Add(_localctx._expression);
				State = 366;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 362; Match(T__7);
						State = 363; _localctx._expression = expression();
						_localctx._members.Add(_localctx._expression);
						}
						} 
					}
					State = 368;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
				}
				}
				break;
			}
			State = 371; Match(T__8);

				var type = (_localctx._members)[0].expr.Type;
				_localctx.expr =  NewArrayInit(type, (_localctx._members).Select(x => x.expr));

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return containmentExpression_sempred((ContainmentExpressionContext)_localctx, predIndex);

		case 3: return orExpression_sempred((OrExpressionContext)_localctx, predIndex);

		case 4: return xorExpression_sempred((XorExpressionContext)_localctx, predIndex);

		case 5: return andExpression_sempred((AndExpressionContext)_localctx, predIndex);

		case 6: return equalityExpression_sempred((EqualityExpressionContext)_localctx, predIndex);

		case 7: return comparisonExpression_sempred((ComparisonExpressionContext)_localctx, predIndex);

		case 8: return additiveExpression_sempred((AdditiveExpressionContext)_localctx, predIndex);

		case 9: return multiplicativeExpression_sempred((MultiplicativeExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool containmentExpression_sempred(ContainmentExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool orExpression_sempred(OrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool xorExpression_sempred(XorExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool andExpression_sempred(AndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool equalityExpression_sempred(EqualityExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(_ctx, 3);

		case 5: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool comparisonExpression_sempred(ComparisonExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(_ctx, 5);

		case 7: return Precpred(_ctx, 4);

		case 8: return Precpred(_ctx, 3);

		case 9: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool additiveExpression_sempred(AdditiveExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(_ctx, 3);

		case 11: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool multiplicativeExpression_sempred(MultiplicativeExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return Precpred(_ctx, 4);

		case 13: return Precpred(_ctx, 3);

		case 14: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3,\x179\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2=\n\x2\x3\x3\x3\x3\x3"+
		"\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\a\x4K\n\x4\f"+
		"\x4\xE\x4N\v\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\a\x5Y\n\x5\f\x5\xE\x5\\\v\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\a\x6g\n\x6\f\x6\xE\x6j\v\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\a\au\n\a\f\a\xE\ax\v\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\a\b\x88\n\b\f\b\xE\b\x8B\v\b\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\a\t\xA5\n\t\f\t\xE\t\xA8"+
		"\v\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n"+
		"\x3\n\a\n\xB8\n\n\f\n\xE\n\xBB\v\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v"+
		"\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\a\v\xD0\n"+
		"\v\f\v\xE\v\xD3\v\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f"+
		"\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f\xE5\n\f\x3\r\x3\r\x3\r\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE"+
		"\x102\n\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x5\xF\x10F\n\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10"+
		"\x121\n\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x5\x11\x12D\n\x11\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x5\x14\x14B\n\x14\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x5\x17\x158\n\x17\x3\x18\x3\x18"+
		"\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x161\n\x19\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x169\n\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\a\x1B\x16F\n\x1B\f\x1B\xE\x1B\x172\v\x1B\x5\x1B\x174\n\x1B\x3\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x2\x2\n\x6\b\n\f\xE\x10\x12\x14\x1C\x2\x2\x4\x2\x6"+
		"\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C"+
		"\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x2\x3"+
		"\x3\x2\'(\x18D\x2<\x3\x2\x2\x2\x4>\x3\x2\x2\x2\x6\x41\x3\x2\x2\x2\bO\x3"+
		"\x2\x2\x2\n]\x3\x2\x2\x2\fk\x3\x2\x2\x2\xEy\x3\x2\x2\x2\x10\x8C\x3\x2"+
		"\x2\x2\x12\xA9\x3\x2\x2\x2\x14\xBC\x3\x2\x2\x2\x16\xE4\x3\x2\x2\x2\x18"+
		"\xE6\x3\x2\x2\x2\x1A\x101\x3\x2\x2\x2\x1C\x10E\x3\x2\x2\x2\x1E\x120\x3"+
		"\x2\x2\x2 \x12C\x3\x2\x2\x2\"\x12E\x3\x2\x2\x2$\x131\x3\x2\x2\x2&\x14A"+
		"\x3\x2\x2\x2(\x14C\x3\x2\x2\x2*\x14F\x3\x2\x2\x2,\x157\x3\x2\x2\x2.\x159"+
		"\x3\x2\x2\x2\x30\x160\x3\x2\x2\x2\x32\x168\x3\x2\x2\x2\x34\x16A\x3\x2"+
		"\x2\x2\x36\x37\x5\x18\r\x2\x37\x38\b\x2\x1\x2\x38\x39\a\x2\x2\x3\x39="+
		"\x3\x2\x2\x2:=\a\x2\x2\x3;=\x3\x2\x2\x2<\x36\x3\x2\x2\x2<:\x3\x2\x2\x2"+
		"<;\x3\x2\x2\x2=\x3\x3\x2\x2\x2>?\x5\x6\x4\x2?@\b\x3\x1\x2@\x5\x3\x2\x2"+
		"\x2\x41\x42\b\x4\x1\x2\x42\x43\x5\b\x5\x2\x43\x44\b\x4\x1\x2\x44L\x3\x2"+
		"\x2\x2\x45\x46\f\x4\x2\x2\x46G\a\x18\x2\x2GH\x5\b\x5\x2HI\b\x4\x1\x2I"+
		"K\x3\x2\x2\x2J\x45\x3\x2\x2\x2KN\x3\x2\x2\x2LJ\x3\x2\x2\x2LM\x3\x2\x2"+
		"\x2M\a\x3\x2\x2\x2NL\x3\x2\x2\x2OP\b\x5\x1\x2PQ\x5\n\x6\x2QR\b\x5\x1\x2"+
		"RZ\x3\x2\x2\x2ST\f\x4\x2\x2TU\a\x16\x2\x2UV\x5\n\x6\x2VW\b\x5\x1\x2WY"+
		"\x3\x2\x2\x2XS\x3\x2\x2\x2Y\\\x3\x2\x2\x2ZX\x3\x2\x2\x2Z[\x3\x2\x2\x2"+
		"[\t\x3\x2\x2\x2\\Z\x3\x2\x2\x2]^\b\x6\x1\x2^_\x5\f\a\x2_`\b\x6\x1\x2`"+
		"h\x3\x2\x2\x2\x61\x62\f\x4\x2\x2\x62\x63\a\x17\x2\x2\x63\x64\x5\f\a\x2"+
		"\x64\x65\b\x6\x1\x2\x65g\x3\x2\x2\x2\x66\x61\x3\x2\x2\x2gj\x3\x2\x2\x2"+
		"h\x66\x3\x2\x2\x2hi\x3\x2\x2\x2i\v\x3\x2\x2\x2jh\x3\x2\x2\x2kl\b\a\x1"+
		"\x2lm\x5\xE\b\x2mn\b\a\x1\x2nv\x3\x2\x2\x2op\f\x4\x2\x2pq\a\x15\x2\x2"+
		"qr\x5\xE\b\x2rs\b\a\x1\x2su\x3\x2\x2\x2to\x3\x2\x2\x2ux\x3\x2\x2\x2vt"+
		"\x3\x2\x2\x2vw\x3\x2\x2\x2w\r\x3\x2\x2\x2xv\x3\x2\x2\x2yz\b\b\x1\x2z{"+
		"\x5\x10\t\x2{|\b\b\x1\x2|\x89\x3\x2\x2\x2}~\f\x5\x2\x2~\x7F\a!\x2\x2\x7F"+
		"\x80\x5\x10\t\x2\x80\x81\b\b\x1\x2\x81\x88\x3\x2\x2\x2\x82\x83\f\x4\x2"+
		"\x2\x83\x84\a \x2\x2\x84\x85\x5\x10\t\x2\x85\x86\b\b\x1\x2\x86\x88\x3"+
		"\x2\x2\x2\x87}\x3\x2\x2\x2\x87\x82\x3\x2\x2\x2\x88\x8B\x3\x2\x2\x2\x89"+
		"\x87\x3\x2\x2\x2\x89\x8A\x3\x2\x2\x2\x8A\xF\x3\x2\x2\x2\x8B\x89\x3\x2"+
		"\x2\x2\x8C\x8D\b\t\x1\x2\x8D\x8E\x5\x12\n\x2\x8E\x8F\b\t\x1\x2\x8F\xA6"+
		"\x3\x2\x2\x2\x90\x91\f\a\x2\x2\x91\x92\a\"\x2\x2\x92\x93\x5\x12\n\x2\x93"+
		"\x94\b\t\x1\x2\x94\xA5\x3\x2\x2\x2\x95\x96\f\x6\x2\x2\x96\x97\a#\x2\x2"+
		"\x97\x98\x5\x12\n\x2\x98\x99\b\t\x1\x2\x99\xA5\x3\x2\x2\x2\x9A\x9B\f\x5"+
		"\x2\x2\x9B\x9C\a$\x2\x2\x9C\x9D\x5\x12\n\x2\x9D\x9E\b\t\x1\x2\x9E\xA5"+
		"\x3\x2\x2\x2\x9F\xA0\f\x4\x2\x2\xA0\xA1\a%\x2\x2\xA1\xA2\x5\x12\n\x2\xA2"+
		"\xA3\b\t\x1\x2\xA3\xA5\x3\x2\x2\x2\xA4\x90\x3\x2\x2\x2\xA4\x95\x3\x2\x2"+
		"\x2\xA4\x9A\x3\x2\x2\x2\xA4\x9F\x3\x2\x2\x2\xA5\xA8\x3\x2\x2\x2\xA6\xA4"+
		"\x3\x2\x2\x2\xA6\xA7\x3\x2\x2\x2\xA7\x11\x3\x2\x2\x2\xA8\xA6\x3\x2\x2"+
		"\x2\xA9\xAA\b\n\x1\x2\xAA\xAB\x5\x14\v\x2\xAB\xAC\b\n\x1\x2\xAC\xB9\x3"+
		"\x2\x2\x2\xAD\xAE\f\x5\x2\x2\xAE\xAF\a(\x2\x2\xAF\xB0\x5\x14\v\x2\xB0"+
		"\xB1\b\n\x1\x2\xB1\xB8\x3\x2\x2\x2\xB2\xB3\f\x4\x2\x2\xB3\xB4\a\'\x2\x2"+
		"\xB4\xB5\x5\x14\v\x2\xB5\xB6\b\n\x1\x2\xB6\xB8\x3\x2\x2\x2\xB7\xAD\x3"+
		"\x2\x2\x2\xB7\xB2\x3\x2\x2\x2\xB8\xBB\x3\x2\x2\x2\xB9\xB7\x3\x2\x2\x2"+
		"\xB9\xBA\x3\x2\x2\x2\xBA\x13\x3\x2\x2\x2\xBB\xB9\x3\x2\x2\x2\xBC\xBD\b"+
		"\v\x1\x2\xBD\xBE\x5\x16\f\x2\xBE\xBF\b\v\x1\x2\xBF\xD1\x3\x2\x2\x2\xC0"+
		"\xC1\f\x6\x2\x2\xC1\xC2\a*\x2\x2\xC2\xC3\x5\x16\f\x2\xC3\xC4\b\v\x1\x2"+
		"\xC4\xD0\x3\x2\x2\x2\xC5\xC6\f\x5\x2\x2\xC6\xC7\a+\x2\x2\xC7\xC8\x5\x16"+
		"\f\x2\xC8\xC9\b\v\x1\x2\xC9\xD0\x3\x2\x2\x2\xCA\xCB\f\x4\x2\x2\xCB\xCC"+
		"\a,\x2\x2\xCC\xCD\x5\x16\f\x2\xCD\xCE\b\v\x1\x2\xCE\xD0\x3\x2\x2\x2\xCF"+
		"\xC0\x3\x2\x2\x2\xCF\xC5\x3\x2\x2\x2\xCF\xCA\x3\x2\x2\x2\xD0\xD3\x3\x2"+
		"\x2\x2\xD1\xCF\x3\x2\x2\x2\xD1\xD2\x3\x2\x2\x2\xD2\x15\x3\x2\x2\x2\xD3"+
		"\xD1\x3\x2\x2\x2\xD4\xD5\a&\x2\x2\xD5\xD6\x5\x16\f\x2\xD6\xD7\b\f\x1\x2"+
		"\xD7\xE5\x3\x2\x2\x2\xD8\xD9\a\'\x2\x2\xD9\xDA\x5\x16\f\x2\xDA\xDB\b\f"+
		"\x1\x2\xDB\xE5\x3\x2\x2\x2\xDC\xDD\a\x3\x2\x2\xDD\xDE\x5\x18\r\x2\xDE"+
		"\xDF\b\f\x1\x2\xDF\xE0\a\x4\x2\x2\xE0\xE5\x3\x2\x2\x2\xE1\xE2\x5\x1A\xE"+
		"\x2\xE2\xE3\b\f\x1\x2\xE3\xE5\x3\x2\x2\x2\xE4\xD4\x3\x2\x2\x2\xE4\xD8"+
		"\x3\x2\x2\x2\xE4\xDC\x3\x2\x2\x2\xE4\xE1\x3\x2\x2\x2\xE5\x17\x3\x2\x2"+
		"\x2\xE6\xE7\x5\x4\x3\x2\xE7\xE8\b\r\x1\x2\xE8\x19\x3\x2\x2\x2\xE9\xEA"+
		"\x5&\x14\x2\xEA\xEB\b\xE\x1\x2\xEB\x102\x3\x2\x2\x2\xEC\xED\x5(\x15\x2"+
		"\xED\xEE\b\xE\x1\x2\xEE\x102\x3\x2\x2\x2\xEF\xF0\x5\"\x12\x2\xF0\xF1\b"+
		"\xE\x1\x2\xF1\x102\x3\x2\x2\x2\xF2\xF3\x5$\x13\x2\xF3\xF4\b\xE\x1\x2\xF4"+
		"\x102\x3\x2\x2\x2\xF5\xF6\x5\x32\x1A\x2\xF6\xF7\b\xE\x1\x2\xF7\x102\x3"+
		"\x2\x2\x2\xF8\xF9\x5\x30\x19\x2\xF9\xFA\b\xE\x1\x2\xFA\x102\x3\x2\x2\x2"+
		"\xFB\xFC\x5\x1C\xF\x2\xFC\xFD\b\xE\x1\x2\xFD\x102\x3\x2\x2\x2\xFE\xFF"+
		"\x5\x34\x1B\x2\xFF\x100\b\xE\x1\x2\x100\x102\x3\x2\x2\x2\x101\xE9\x3\x2"+
		"\x2\x2\x101\xEC\x3\x2\x2\x2\x101\xEF\x3\x2\x2\x2\x101\xF2\x3\x2\x2\x2"+
		"\x101\xF5\x3\x2\x2\x2\x101\xF8\x3\x2\x2\x2\x101\xFB\x3\x2\x2\x2\x101\xFE"+
		"\x3\x2\x2\x2\x102\x1B\x3\x2\x2\x2\x103\x104\x5\x1E\x10\x2\x104\x105\b"+
		"\xF\x1\x2\x105\x10F\x3\x2\x2\x2\x106\x107\x5 \x11\x2\x107\x108\b\xF\x1"+
		"\x2\x108\x10F\x3\x2\x2\x2\x109\x10A\x5 \x11\x2\x10A\x10B\a\x5\x2\x2\x10B"+
		"\x10C\x5 \x11\x2\x10C\x10D\b\xF\x1\x2\x10D\x10F\x3\x2\x2\x2\x10E\x103"+
		"\x3\x2\x2\x2\x10E\x106\x3\x2\x2\x2\x10E\x109\x3\x2\x2\x2\x10F\x1D\x3\x2"+
		"\x2\x2\x110\x111\a\x12\x2\x2\x111\x121\b\x10\x1\x2\x112\x113\a\x13\x2"+
		"\x2\x113\x121\b\x10\x1\x2\x114\x115\a\x14\x2\x2\x115\x121\b\x10\x1\x2"+
		"\x116\x117\a\x19\x2\x2\x117\x121\b\x10\x1\x2\x118\x119\a\x1A\x2\x2\x119"+
		"\x121\b\x10\x1\x2\x11A\x11B\a\x1B\x2\x2\x11B\x121\b\x10\x1\x2\x11C\x11D"+
		"\a\x1C\x2\x2\x11D\x121\b\x10\x1\x2\x11E\x11F\a\x1D\x2\x2\x11F\x121\b\x10"+
		"\x1\x2\x120\x110\x3\x2\x2\x2\x120\x112\x3\x2\x2\x2\x120\x114\x3\x2\x2"+
		"\x2\x120\x116\x3\x2\x2\x2\x120\x118\x3\x2\x2\x2\x120\x11A\x3\x2\x2\x2"+
		"\x120\x11C\x3\x2\x2\x2\x120\x11E\x3\x2\x2\x2\x121\x1F\x3\x2\x2\x2\x122"+
		"\x123\a\x6\x2\x2\x123\x124\x5\"\x12\x2\x124\x125\b\x11\x1\x2\x125\x12D"+
		"\x3\x2\x2\x2\x126\x127\a\x6\x2\x2\x127\x128\x5$\x13\x2\x128\x129\b\x11"+
		"\x1\x2\x129\x12D\x3\x2\x2\x2\x12A\x12B\a)\x2\x2\x12B\x12D\b\x11\x1\x2"+
		"\x12C\x122\x3\x2\x2\x2\x12C\x126\x3\x2\x2\x2\x12C\x12A\x3\x2\x2\x2\x12D"+
		"!\x3\x2\x2\x2\x12E\x12F\a\r\x2\x2\x12F\x130\b\x12\x1\x2\x130#\x3\x2\x2"+
		"\x2\x131\x132\a\xE\x2\x2\x132\x133\b\x13\x1\x2\x133%\x3\x2\x2\x2\x134"+
		"\x135\a\x11\x2\x2\x135\x136\a\x5\x2\x2\x136\x137\a\x11\x2\x2\x137\x138"+
		"\x5*\x16\x2\x138\x139\b\x14\x1\x2\x139\x14B\x3\x2\x2\x2\x13A\x13B\a\x5"+
		"\x2\x2\x13B\x13C\a\x11\x2\x2\x13C\x13D\x5*\x16\x2\x13D\x13E\b\x14\x1\x2"+
		"\x13E\x14B\x3\x2\x2\x2\x13F\x140\a\x11\x2\x2\x140\x141\x5*\x16\x2\x141"+
		"\x142\b\x14\x1\x2\x142\x14B\x3\x2\x2\x2\x143\x144\a\x11\x2\x2\x144\x145"+
		"\a\x5\x2\x2\x145\x146\a\x11\x2\x2\x146\x14B\b\x14\x1\x2\x147\x148\a\x5"+
		"\x2\x2\x148\x149\a\x11\x2\x2\x149\x14B\b\x14\x1\x2\x14A\x134\x3\x2\x2"+
		"\x2\x14A\x13A\x3\x2\x2\x2\x14A\x13F\x3\x2\x2\x2\x14A\x143\x3\x2\x2\x2"+
		"\x14A\x147\x3\x2\x2\x2\x14B\'\x3\x2\x2\x2\x14C\x14D\a\x11\x2\x2\x14D\x14E"+
		"\b\x15\x1\x2\x14E)\x3\x2\x2\x2\x14F\x150\a\a\x2\x2\x150\x151\t\x2\x2\x2"+
		"\x151\x152\a\x11\x2\x2\x152+\x3\x2\x2\x2\x153\x154\a\x13\x2\x2\x154\x158"+
		"\b\x17\x1\x2\x155\x156\a\x14\x2\x2\x156\x158\b\x17\x1\x2\x157\x153\x3"+
		"\x2\x2\x2\x157\x155\x3\x2\x2\x2\x158-\x3\x2\x2\x2\x159\x15A\a\x12\x2\x2"+
		"\x15A\x15B\b\x18\x1\x2\x15B/\x3\x2\x2\x2\x15C\x15D\a\xF\x2\x2\x15D\x161"+
		"\b\x19\x1\x2\x15E\x15F\a\x10\x2\x2\x15F\x161\b\x19\x1\x2\x160\x15C\x3"+
		"\x2\x2\x2\x160\x15E\x3\x2\x2\x2\x161\x31\x3\x2\x2\x2\x162\x163\a\b\x2"+
		"\x2\x163\x164\a\x1F\x2\x2\x164\x169\b\x1A\x1\x2\x165\x166\a\b\x2\x2\x166"+
		"\x167\a\x1E\x2\x2\x167\x169\b\x1A\x1\x2\x168\x162\x3\x2\x2\x2\x168\x165"+
		"\x3\x2\x2\x2\x169\x33\x3\x2\x2\x2\x16A\x173\a\t\x2\x2\x16B\x170\x5\x18"+
		"\r\x2\x16C\x16D\a\n\x2\x2\x16D\x16F\x5\x18\r\x2\x16E\x16C\x3\x2\x2\x2"+
		"\x16F\x172\x3\x2\x2\x2\x170\x16E\x3\x2\x2\x2\x170\x171\x3\x2\x2\x2\x171"+
		"\x174\x3\x2\x2\x2\x172\x170\x3\x2\x2\x2\x173\x16B\x3\x2\x2\x2\x173\x174"+
		"\x3\x2\x2\x2\x174\x175\x3\x2\x2\x2\x175\x176\a\v\x2\x2\x176\x177\b\x1B"+
		"\x1\x2\x177\x35\x3\x2\x2\x2\x1A<LZhv\x87\x89\xA4\xA6\xB7\xB9\xCF\xD1\xE4"+
		"\x101\x10E\x120\x12C\x14A\x157\x160\x168\x170\x173";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Transact.Query
