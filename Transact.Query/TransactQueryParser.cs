//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Repos\ParserGen\ParserGen\TransactQuery.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Transact.Query {

	using System.Linq.Expressions;
	using static System.Linq.Expressions.Expression;
	using System.Reflection;

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class TransactQueryParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, WS=20, QUOTED_STRING=21, SINGLE_QUOTED_STRING=22, 
		GUID_SLASH=23, GUID=24, INT=25, ID=26, NULL=27, TRUE=28, FALSE=29, AND=30, 
		OR=31, XOR=32, DATE=33, TIME=34, DATETIME=35;
	public const int
		RULE_compileUnit = 0, RULE_logicalExpression = 1, RULE_additiveExpression = 2, 
		RULE_comparisonExpression = 3, RULE_multiplicativeExpression = 4, RULE_unaryExpression = 5, 
		RULE_expression = 6, RULE_literalExpression = 7, RULE_identifierChain = 8, 
		RULE_identifier = 9, RULE_quotedString = 10, RULE_singleQuotedString = 11, 
		RULE_float = 12, RULE_integer = 13, RULE_exponent = 14, RULE_boolean = 15, 
		RULE_null = 16, RULE_guid = 17, RULE_date = 18;
	public static readonly string[] ruleNames = {
		"compileUnit", "logicalExpression", "additiveExpression", "comparisonExpression", 
		"multiplicativeExpression", "unaryExpression", "expression", "literalExpression", 
		"identifierChain", "identifier", "quotedString", "singleQuotedString", 
		"float", "integer", "exponent", "boolean", "null", "guid", "date"
	};

	private static readonly string[] _LiteralNames = {
		null, "'+'", "'-'", "'='", "'!='", "'<>'", "'>'", "'<'", "'>='", "'<='", 
		"'*'", "'/'", "'%'", "'not'", "'!'", "'('", "')'", "'.'", "'@'", "'e'", 
		"' '", null, null, null, null, null, null, "'null'", "'true'", "'false'", 
		"'and'", "'or'", "'xor'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "WS", "QUOTED_STRING", 
		"SINGLE_QUOTED_STRING", "GUID_SLASH", "GUID", "INT", "ID", "NULL", "TRUE", 
		"FALSE", "AND", "OR", "XOR", "DATE", "TIME", "DATETIME"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TransactQuery.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }


		public ParameterExpression Transaction { get; } = Parameter(typeof(Transaction));
	    public static MemberExpression GetPropertyCI(Expression owner, string name)
	    {
	        return Property(owner, owner.Type.GetProperty(name, System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.GetProperty | System.Reflection.BindingFlags.IgnoreCase | System.Reflection.BindingFlags.Public));
	    }

	public TransactQueryParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public Expression expr;
		public ExpressionContext _expression;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(TransactQueryParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			State = 44;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 38; _localctx._expression = expression();
				 _localctx.expr =  _localctx._expression.expr; 
				State = 40; Match(Eof);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 42; Match(Eof);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalExpressionContext : ParserRuleContext {
		public Expression expr;
		public LogicalExpressionContext lhs;
		public AdditiveExpressionContext _additiveExpression;
		public IToken op;
		public AdditiveExpressionContext rhs;
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public LogicalExpressionContext logicalExpression() {
			return GetRuleContext<LogicalExpressionContext>(0);
		}
		public LogicalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalExpression; } }
	}

	[RuleVersion(0)]
	public LogicalExpressionContext logicalExpression() {
		return logicalExpression(0);
	}

	private LogicalExpressionContext logicalExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		LogicalExpressionContext _localctx = new LogicalExpressionContext(_ctx, _parentState);
		LogicalExpressionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_logicalExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 47; _localctx._additiveExpression = additiveExpression(0);
			 _localctx.expr =  _localctx._additiveExpression.expr; 
			}
			_ctx.stop = _input.Lt(-1);
			State = 57;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalExpressionContext(_parentctx, _parentState);
					_localctx.lhs = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_logicalExpression);
					State = 50;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 51;
					_localctx.op = _input.Lt(1);
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND) | (1L << OR) | (1L << XOR))) != 0)) ) {
						_localctx.op = _errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					State = 52; _localctx.rhs = _localctx._additiveExpression = additiveExpression(0);

					          		switch((_localctx.op!=null?_localctx.op.Text:null)) {
					          			case "or":
					          				_localctx.expr =  OrElse(_localctx.lhs.expr, _localctx.rhs.expr);
					          				break;
					          			case "and":
					          				_localctx.expr =  AndAlso(_localctx.lhs.expr, _localctx.rhs.expr);
					          				break;
					          			case "xor":
					          				_localctx.expr =  ExclusiveOr(_localctx.lhs.expr, _localctx.rhs.expr);
					          				break;
					          			default:
					          				throw new System.NotSupportedException();
					          		}
					          	
					}
					} 
				}
				State = 59;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		public Expression expr;
		public AdditiveExpressionContext lhs;
		public ComparisonExpressionContext _comparisonExpression;
		public IToken op;
		public ComparisonExpressionContext rhs;
		public ComparisonExpressionContext comparisonExpression() {
			return GetRuleContext<ComparisonExpressionContext>(0);
		}
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		return additiveExpression(0);
	}

	private AdditiveExpressionContext additiveExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(_ctx, _parentState);
		AdditiveExpressionContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_additiveExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 61; _localctx._comparisonExpression = comparisonExpression(0);
			 _localctx.expr =  _localctx._comparisonExpression.expr; 
			}
			_ctx.stop = _input.Lt(-1);
			State = 71;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
					_localctx.lhs = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
					State = 64;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 65;
					_localctx.op = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==T__0 || _la==T__1) ) {
						_localctx.op = _errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					State = 66; _localctx.rhs = _localctx._comparisonExpression = comparisonExpression(0);

					          		switch((_localctx.op!=null?_localctx.op.Text:null)) {
					          			case "+":
					          				_localctx.expr =  AddChecked(_localctx.lhs.expr, _localctx.rhs.expr);
					          				break;
					          			case "-":
					          				_localctx.expr =  SubtractChecked(_localctx.lhs.expr, _localctx.rhs.expr);
					          				break;
					          			default:
					          				throw new System.NotSupportedException();
					          		}
					          	
					}
					} 
				}
				State = 73;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ComparisonExpressionContext : ParserRuleContext {
		public Expression expr;
		public ComparisonExpressionContext lhs;
		public MultiplicativeExpressionContext _multiplicativeExpression;
		public IToken op;
		public MultiplicativeExpressionContext rhs;
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public ComparisonExpressionContext comparisonExpression() {
			return GetRuleContext<ComparisonExpressionContext>(0);
		}
		public ComparisonExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonExpression; } }
	}

	[RuleVersion(0)]
	public ComparisonExpressionContext comparisonExpression() {
		return comparisonExpression(0);
	}

	private ComparisonExpressionContext comparisonExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ComparisonExpressionContext _localctx = new ComparisonExpressionContext(_ctx, _parentState);
		ComparisonExpressionContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_comparisonExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 75; _localctx._multiplicativeExpression = multiplicativeExpression(0);
			 _localctx.expr =  _localctx._multiplicativeExpression.expr; 
			}
			_ctx.stop = _input.Lt(-1);
			State = 85;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ComparisonExpressionContext(_parentctx, _parentState);
					_localctx.lhs = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_comparisonExpression);
					State = 78;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 79;
					_localctx.op = _input.Lt(1);
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8))) != 0)) ) {
						_localctx.op = _errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					State = 80; _localctx.rhs = _localctx._multiplicativeExpression = multiplicativeExpression(0);

					          		switch((_localctx.op!=null?_localctx.op.Text:null)) {
					          			case "=":
					          				if(_localctx.lhs.expr.Type == typeof(JsonValue) || _localctx.rhs.expr.Type == typeof(JsonValue)) {
					          					_localctx.expr =  Equal(_localctx.lhs.expr, _localctx.rhs.expr, false,  typeof(JsonValue).GetMethod("Equals", new [] { _localctx.lhs.expr.Type, _localctx.rhs.expr.Type }));
					          				}
					          				else { 
					          					_localctx.expr =  Equal(_localctx.lhs.expr, _localctx.rhs.expr);
					          				}
					          				break;
					          			case ">":
					          				_localctx.expr =  GreaterThan(_localctx.lhs.expr, _localctx.rhs.expr);
					          				break;
					          			case ">=":
					          				_localctx.expr =  GreaterThanOrEqual(_localctx.lhs.expr, _localctx.rhs.expr);
					          				break;
					          			case "<":
					          				_localctx.expr =  LessThan(_localctx.lhs.expr, _localctx.rhs.expr);
					          				break;
					          			case "<=":
					          				_localctx.expr =  LessThanOrEqual(_localctx.lhs.expr, _localctx.rhs.expr);
					          				break;
					          			case "!=":
					          			case "<>":
					          				_localctx.expr =  NotEqual(_localctx.lhs.expr, _localctx.rhs.expr);
					          				break;
					          			default:
					          				throw new System.NotSupportedException();
					          		}
					          	
					}
					} 
				}
				State = 87;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		public Expression expr;
		public MultiplicativeExpressionContext lhs;
		public UnaryExpressionContext _unaryExpression;
		public IToken op;
		public UnaryExpressionContext rhs;
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		return multiplicativeExpression(0);
	}

	private MultiplicativeExpressionContext multiplicativeExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(_ctx, _parentState);
		MultiplicativeExpressionContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_multiplicativeExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 89; _localctx._unaryExpression = unaryExpression();
			 _localctx.expr =  _localctx._unaryExpression.expr; 
			}
			_ctx.stop = _input.Lt(-1);
			State = 99;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
					_localctx.lhs = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
					State = 92;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 93;
					_localctx.op = _input.Lt(1);
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__9) | (1L << T__10) | (1L << T__11))) != 0)) ) {
						_localctx.op = _errHandler.RecoverInline(this);
					} else {
						Consume();
					}
					State = 94; _localctx.rhs = _localctx._unaryExpression = unaryExpression();

					          		switch((_localctx.op!=null?_localctx.op.Text:null)) {
					          			case "*":
					          				_localctx.expr =  Multiply(_localctx.lhs.expr, _localctx.rhs.expr);
					          				break;
					          			case "/":
					          				_localctx.expr =  Divide(_localctx.lhs.expr, _localctx.rhs.expr);
					          				break;
					          			case "%":
					          				_localctx.expr =  Modulo(_localctx.lhs.expr, _localctx.rhs.expr);
					          				break;
					          			default:
					          				throw new System.NotSupportedException();
					          		}
					          	
					}
					} 
				}
				State = 101;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public Expression expr;
		public IToken op;
		public ExpressionContext operand;
		public ExpressionContext _expression;
		public LiteralExpressionContext _literalExpression;
		public IdentifierChainContext _identifierChain;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LiteralExpressionContext literalExpression() {
			return GetRuleContext<LiteralExpressionContext>(0);
		}
		public IdentifierChainContext identifierChain() {
			return GetRuleContext<IdentifierChainContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_unaryExpression);
		int _la;
		try {
			State = 117;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 102;
				_localctx.op = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__12) | (1L << T__13))) != 0)) ) {
					_localctx.op = _errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				State = 103; _localctx.operand = expression();
				 
						switch((_localctx.op!=null?_localctx.op.Text:null)) {
							case "not":
							case "!":
								_localctx.expr =  Not(_localctx.operand.expr);
								break;
							case "-":
								_localctx.expr =  Negate(_localctx.operand.expr);
								break;
							default:
								throw new System.NotSupportedException();
						}
					
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 106; Match(T__14);
				State = 107; _localctx.operand = _localctx._expression = expression();
				 _localctx.expr =  _localctx._expression.expr; 
				State = 109; Match(T__15);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 111; _localctx._literalExpression = literalExpression();
				 _localctx.expr =  _localctx._literalExpression.expr; 
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 114; _localctx._identifierChain = identifierChain();
				 _localctx.expr =  _localctx._identifierChain.expr; 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public Expression expr;
		public LogicalExpressionContext _logicalExpression;
		public LogicalExpressionContext logicalExpression() {
			return GetRuleContext<LogicalExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119; _localctx._logicalExpression = logicalExpression(0);
			 _localctx.expr =  _localctx._logicalExpression.expr; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralExpressionContext : ParserRuleContext {
		public Expression expr;
		public FloatContext _float;
		public IntegerContext _integer;
		public QuotedStringContext _quotedString;
		public SingleQuotedStringContext _singleQuotedString;
		public BooleanContext _boolean;
		public DateContext _date;
		public GuidContext _guid;
		public FloatContext @float() {
			return GetRuleContext<FloatContext>(0);
		}
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public QuotedStringContext quotedString() {
			return GetRuleContext<QuotedStringContext>(0);
		}
		public SingleQuotedStringContext singleQuotedString() {
			return GetRuleContext<SingleQuotedStringContext>(0);
		}
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public NullContext @null() {
			return GetRuleContext<NullContext>(0);
		}
		public DateContext date() {
			return GetRuleContext<DateContext>(0);
		}
		public GuidContext guid() {
			return GetRuleContext<GuidContext>(0);
		}
		public LiteralExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalExpression; } }
	}

	[RuleVersion(0)]
	public LiteralExpressionContext literalExpression() {
		LiteralExpressionContext _localctx = new LiteralExpressionContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_literalExpression);
		try {
			State = 146;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 122; _localctx._float = @float();
				 _localctx.expr =  Constant(_localctx._float.value, typeof(float));
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 125; _localctx._integer = integer();
				 _localctx.expr =  Constant(_localctx._integer.value, typeof(int)); 
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 128; _localctx._quotedString = quotedString();
				 _localctx.expr =  Constant(_localctx._quotedString.value, typeof(string)); 
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 131; _localctx._singleQuotedString = singleQuotedString();
				 _localctx.expr =  Constant(_localctx._singleQuotedString.value, typeof(string)); 
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 134; _localctx._boolean = boolean();
				 _localctx.expr =  Constant(_localctx._boolean.value, typeof(bool)); 
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 137; @null();
				 _localctx.expr =  Constant(null); 
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 140; _localctx._date = date();
				 _localctx.expr =  Constant(_localctx._date.value, typeof(System.DateTime)); 
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 143; _localctx._guid = guid();
				 _localctx.expr =  Constant(_localctx._guid.value, typeof(System.Guid)); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierChainContext : ParserRuleContext {
		public Expression expr;
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _identifiers = new List<IdentifierContext>();
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public IdentifierChainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierChain; } }
	}

	[RuleVersion(0)]
	public IdentifierChainContext identifierChain() {
		IdentifierChainContext _localctx = new IdentifierChainContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_identifierChain);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 148; _localctx._identifier = identifier();
			_localctx._identifiers.Add(_localctx._identifier);
			State = 153;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 149; Match(T__16);
					State = 150; _localctx._identifier = identifier();
					_localctx._identifiers.Add(_localctx._identifier);
					}
					} 
				}
				State = 155;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			}
			}
			 
					if(_localctx._identifiers.Count == 1) {
						_localctx.expr =  GetPropertyCI(Transaction, _localctx._identifiers[0].value);
					} else if(_localctx._identifiers.Count == 2) {
						string dynamicObject = _localctx._identifiers[0].value;
						string memberName = _localctx._identifiers[1].value;
						var ctor = typeof(Transact.JsonValue).GetConstructor(new[] { typeof(IDictionary<string, object>), typeof(string), typeof(string) });
						_localctx.expr =   New(ctor, Expression.Convert(GetPropertyCI(Transaction, dynamicObject), typeof(IDictionary<string, object>)), Constant(dynamicObject), Constant(memberName));
					} else {
						throw new System.NotImplementedException();
					}
					

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public string value;
		public QuotedStringContext _quotedString;
		public SingleQuotedStringContext _singleQuotedString;
		public IToken _ID;
		public QuotedStringContext quotedString() {
			return GetRuleContext<QuotedStringContext>(0);
		}
		public SingleQuotedStringContext singleQuotedString() {
			return GetRuleContext<SingleQuotedStringContext>(0);
		}
		public ITerminalNode ID() { return GetToken(TransactQueryParser.ID, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_identifier);
		try {
			State = 168;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 158; Match(T__17);
				State = 159; _localctx._quotedString = quotedString();
				 _localctx.value =  _localctx._quotedString.value; 
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 162; Match(T__17);
				State = 163; _localctx._singleQuotedString = singleQuotedString();
				 _localctx.value =  _localctx._singleQuotedString.value; 
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 166; _localctx._ID = Match(ID);
				 _localctx.value =  (_localctx._ID!=null?_localctx._ID.Text:null); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuotedStringContext : ParserRuleContext {
		public string value;
		public IToken _QUOTED_STRING;
		public ITerminalNode QUOTED_STRING() { return GetToken(TransactQueryParser.QUOTED_STRING, 0); }
		public QuotedStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quotedString; } }
	}

	[RuleVersion(0)]
	public QuotedStringContext quotedString() {
		QuotedStringContext _localctx = new QuotedStringContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_quotedString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170; _localctx._QUOTED_STRING = Match(QUOTED_STRING);
			 _localctx.value =  (_localctx._QUOTED_STRING!=null?_localctx._QUOTED_STRING.Text:null).Substring(1, (_localctx._QUOTED_STRING!=null?_localctx._QUOTED_STRING.Text:null).Length - 2); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleQuotedStringContext : ParserRuleContext {
		public string value;
		public IToken _SINGLE_QUOTED_STRING;
		public ITerminalNode SINGLE_QUOTED_STRING() { return GetToken(TransactQueryParser.SINGLE_QUOTED_STRING, 0); }
		public SingleQuotedStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleQuotedString; } }
	}

	[RuleVersion(0)]
	public SingleQuotedStringContext singleQuotedString() {
		SingleQuotedStringContext _localctx = new SingleQuotedStringContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_singleQuotedString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173; _localctx._SINGLE_QUOTED_STRING = Match(SINGLE_QUOTED_STRING);
			 _localctx.value =  (_localctx._SINGLE_QUOTED_STRING!=null?_localctx._SINGLE_QUOTED_STRING.Text:null).Substring(1, (_localctx._SINGLE_QUOTED_STRING!=null?_localctx._SINGLE_QUOTED_STRING.Text:null).Length - 2); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatContext : ParserRuleContext {
		public double value;
		public ITerminalNode[] INT() { return GetTokens(TransactQueryParser.INT); }
		public ITerminalNode INT(int i) {
			return GetToken(TransactQueryParser.INT, i);
		}
		public ExponentContext exponent() {
			return GetRuleContext<ExponentContext>(0);
		}
		public FloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float; } }
	}

	[RuleVersion(0)]
	public FloatContext @float() {
		FloatContext _localctx = new FloatContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_float);
		try {
			State = 198;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 176; Match(INT);
				State = 177; Match(T__16);
				State = 178; Match(INT);
				State = 179; exponent();
				 _localctx.value =  double.Parse(_localctx.GetText(), System.Globalization.CultureInfo.InvariantCulture); 
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 182; Match(T__16);
				State = 183; Match(INT);
				State = 184; exponent();
				 _localctx.value =  double.Parse(_localctx.GetText(), System.Globalization.CultureInfo.InvariantCulture); 
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 187; Match(INT);
				State = 188; exponent();
				 _localctx.value =  double.Parse(_localctx.GetText(), System.Globalization.CultureInfo.InvariantCulture); 
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 191; Match(INT);
				State = 192; Match(T__16);
				State = 193; Match(INT);
				 _localctx.value =  double.Parse(_localctx.GetText(), System.Globalization.CultureInfo.InvariantCulture); 
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 195; Match(T__16);
				State = 196; Match(INT);
				 _localctx.value =  double.Parse(_localctx.GetText(), System.Globalization.CultureInfo.InvariantCulture); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		public int value;
		public IToken _INT;
		public ITerminalNode INT() { return GetToken(TransactQueryParser.INT, 0); }
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_integer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; _localctx._INT = Match(INT);
			 _localctx.value =  int.Parse((_localctx._INT!=null?_localctx._INT.Text:null), System.Globalization.CultureInfo.InvariantCulture); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExponentContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(TransactQueryParser.INT, 0); }
		public ExponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exponent; } }
	}

	[RuleVersion(0)]
	public ExponentContext exponent() {
		ExponentContext _localctx = new ExponentContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_exponent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203; Match(T__18);
			State = 204;
			_la = _input.La(1);
			if ( !(_la==T__0 || _la==T__1) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			State = 205; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		public bool value;
		public IToken token;
		public ITerminalNode TRUE() { return GetToken(TransactQueryParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(TransactQueryParser.FALSE, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_boolean);
		try {
			State = 211;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 207; _localctx.token = Match(TRUE);
				 _localctx.value =  true; 
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 209; Match(FALSE);
				 _localctx.value =  false; 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullContext : ParserRuleContext {
		public object value;
		public ITerminalNode NULL() { return GetToken(TransactQueryParser.NULL, 0); }
		public NullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null; } }
	}

	[RuleVersion(0)]
	public NullContext @null() {
		NullContext _localctx = new NullContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_null);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213; Match(NULL);
			 _localctx.value =  null; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GuidContext : ParserRuleContext {
		public System.Guid value;
		public ITerminalNode GUID_SLASH() { return GetToken(TransactQueryParser.GUID_SLASH, 0); }
		public ITerminalNode GUID() { return GetToken(TransactQueryParser.GUID, 0); }
		public GuidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_guid; } }
	}

	[RuleVersion(0)]
	public GuidContext guid() {
		GuidContext _localctx = new GuidContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_guid);
		try {
			State = 219;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 216; Match(GUID_SLASH);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 217; Match(GUID);
				 _localctx.value =  System.Guid.Parse(_localctx.GetText()); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateContext : ParserRuleContext {
		public System.DateTime value;
		public IToken _DATE;
		public IToken _DATETIME;
		public ITerminalNode DATE() { return GetToken(TransactQueryParser.DATE, 0); }
		public ITerminalNode DATETIME() { return GetToken(TransactQueryParser.DATETIME, 0); }
		public DateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date; } }
	}

	[RuleVersion(0)]
	public DateContext date() {
		DateContext _localctx = new DateContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_date);
		try {
			State = 225;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 221; _localctx._DATE = Match(DATE);
				 _localctx.value =  System.DateTime.ParseExact((_localctx._DATE!=null?_localctx._DATE.Text:null), "yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture); 
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 223; _localctx._DATETIME = Match(DATETIME);
				 _localctx.value =  System.DateTime.ParseExact((_localctx._DATETIME!=null?_localctx._DATETIME.Text:null), new [] { "yyyy-MM-dd'T'HH:mm:ss", "yyyy-MM-dd'T'HH:mm:ss.fff" }, System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.AssumeUniversal); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return logicalExpression_sempred((LogicalExpressionContext)_localctx, predIndex);

		case 2: return additiveExpression_sempred((AdditiveExpressionContext)_localctx, predIndex);

		case 3: return comparisonExpression_sempred((ComparisonExpressionContext)_localctx, predIndex);

		case 4: return multiplicativeExpression_sempred((MultiplicativeExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool logicalExpression_sempred(LogicalExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool additiveExpression_sempred(AdditiveExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool comparisonExpression_sempred(ComparisonExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool multiplicativeExpression_sempred(MultiplicativeExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3%\xE6\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x3\x2\x3\x2\x3"+
		"\x2\x3\x2\x3\x2\x3\x2\x5\x2/\n\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\a\x3:\n\x3\f\x3\xE\x3=\v\x3\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\a\x4H\n\x4\f\x4\xE\x4K\v\x4\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\a\x5V\n\x5\f\x5\xE\x5Y\v\x5"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6\x64\n\x6\f"+
		"\x6\xE\x6g\v\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x5\ax\n\a\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\x95\n\t\x3\n\x3\n\x3\n\a\n\x9A\n\n\f\n"+
		"\xE\n\x9D\v\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3"+
		"\v\x5\v\xAB\n\v\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\xC9\n\xE\x3\xF\x3\xF\x3"+
		"\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\xD6"+
		"\n\x11\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x5\x13\xDE\n\x13\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x5\x14\xE4\n\x14\x3\x14\x2\x2\x6\x4\x6\b\n\x15\x2"+
		"\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2"+
		"\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2\x2\a\x3\x2 \"\x3\x2\x3\x4\x3\x2"+
		"\x5\v\x3\x2\f\xE\x4\x2\x4\x4\xF\x10\xEC\x2.\x3\x2\x2\x2\x4\x30\x3\x2\x2"+
		"\x2\x6>\x3\x2\x2\x2\bL\x3\x2\x2\x2\nZ\x3\x2\x2\x2\fw\x3\x2\x2\x2\xEy\x3"+
		"\x2\x2\x2\x10\x94\x3\x2\x2\x2\x12\x96\x3\x2\x2\x2\x14\xAA\x3\x2\x2\x2"+
		"\x16\xAC\x3\x2\x2\x2\x18\xAF\x3\x2\x2\x2\x1A\xC8\x3\x2\x2\x2\x1C\xCA\x3"+
		"\x2\x2\x2\x1E\xCD\x3\x2\x2\x2 \xD5\x3\x2\x2\x2\"\xD7\x3\x2\x2\x2$\xDD"+
		"\x3\x2\x2\x2&\xE3\x3\x2\x2\x2()\x5\xE\b\x2)*\b\x2\x1\x2*+\a\x2\x2\x3+"+
		"/\x3\x2\x2\x2,/\a\x2\x2\x3-/\x3\x2\x2\x2.(\x3\x2\x2\x2.,\x3\x2\x2\x2."+
		"-\x3\x2\x2\x2/\x3\x3\x2\x2\x2\x30\x31\b\x3\x1\x2\x31\x32\x5\x6\x4\x2\x32"+
		"\x33\b\x3\x1\x2\x33;\x3\x2\x2\x2\x34\x35\f\x3\x2\x2\x35\x36\t\x2\x2\x2"+
		"\x36\x37\x5\x6\x4\x2\x37\x38\b\x3\x1\x2\x38:\x3\x2\x2\x2\x39\x34\x3\x2"+
		"\x2\x2:=\x3\x2\x2\x2;\x39\x3\x2\x2\x2;<\x3\x2\x2\x2<\x5\x3\x2\x2\x2=;"+
		"\x3\x2\x2\x2>?\b\x4\x1\x2?@\x5\b\x5\x2@\x41\b\x4\x1\x2\x41I\x3\x2\x2\x2"+
		"\x42\x43\f\x3\x2\x2\x43\x44\t\x3\x2\x2\x44\x45\x5\b\x5\x2\x45\x46\b\x4"+
		"\x1\x2\x46H\x3\x2\x2\x2G\x42\x3\x2\x2\x2HK\x3\x2\x2\x2IG\x3\x2\x2\x2I"+
		"J\x3\x2\x2\x2J\a\x3\x2\x2\x2KI\x3\x2\x2\x2LM\b\x5\x1\x2MN\x5\n\x6\x2N"+
		"O\b\x5\x1\x2OW\x3\x2\x2\x2PQ\f\x3\x2\x2QR\t\x4\x2\x2RS\x5\n\x6\x2ST\b"+
		"\x5\x1\x2TV\x3\x2\x2\x2UP\x3\x2\x2\x2VY\x3\x2\x2\x2WU\x3\x2\x2\x2WX\x3"+
		"\x2\x2\x2X\t\x3\x2\x2\x2YW\x3\x2\x2\x2Z[\b\x6\x1\x2[\\\x5\f\a\x2\\]\b"+
		"\x6\x1\x2]\x65\x3\x2\x2\x2^_\f\x3\x2\x2_`\t\x5\x2\x2`\x61\x5\f\a\x2\x61"+
		"\x62\b\x6\x1\x2\x62\x64\x3\x2\x2\x2\x63^\x3\x2\x2\x2\x64g\x3\x2\x2\x2"+
		"\x65\x63\x3\x2\x2\x2\x65\x66\x3\x2\x2\x2\x66\v\x3\x2\x2\x2g\x65\x3\x2"+
		"\x2\x2hi\t\x6\x2\x2ij\x5\xE\b\x2jk\b\a\x1\x2kx\x3\x2\x2\x2lm\a\x11\x2"+
		"\x2mn\x5\xE\b\x2no\b\a\x1\x2op\a\x12\x2\x2px\x3\x2\x2\x2qr\x5\x10\t\x2"+
		"rs\b\a\x1\x2sx\x3\x2\x2\x2tu\x5\x12\n\x2uv\b\a\x1\x2vx\x3\x2\x2\x2wh\x3"+
		"\x2\x2\x2wl\x3\x2\x2\x2wq\x3\x2\x2\x2wt\x3\x2\x2\x2x\r\x3\x2\x2\x2yz\x5"+
		"\x4\x3\x2z{\b\b\x1\x2{\xF\x3\x2\x2\x2|}\x5\x1A\xE\x2}~\b\t\x1\x2~\x95"+
		"\x3\x2\x2\x2\x7F\x80\x5\x1C\xF\x2\x80\x81\b\t\x1\x2\x81\x95\x3\x2\x2\x2"+
		"\x82\x83\x5\x16\f\x2\x83\x84\b\t\x1\x2\x84\x95\x3\x2\x2\x2\x85\x86\x5"+
		"\x18\r\x2\x86\x87\b\t\x1\x2\x87\x95\x3\x2\x2\x2\x88\x89\x5 \x11\x2\x89"+
		"\x8A\b\t\x1\x2\x8A\x95\x3\x2\x2\x2\x8B\x8C\x5\"\x12\x2\x8C\x8D\b\t\x1"+
		"\x2\x8D\x95\x3\x2\x2\x2\x8E\x8F\x5&\x14\x2\x8F\x90\b\t\x1\x2\x90\x95\x3"+
		"\x2\x2\x2\x91\x92\x5$\x13\x2\x92\x93\b\t\x1\x2\x93\x95\x3\x2\x2\x2\x94"+
		"|\x3\x2\x2\x2\x94\x7F\x3\x2\x2\x2\x94\x82\x3\x2\x2\x2\x94\x85\x3\x2\x2"+
		"\x2\x94\x88\x3\x2\x2\x2\x94\x8B\x3\x2\x2\x2\x94\x8E\x3\x2\x2\x2\x94\x91"+
		"\x3\x2\x2\x2\x95\x11\x3\x2\x2\x2\x96\x9B\x5\x14\v\x2\x97\x98\a\x13\x2"+
		"\x2\x98\x9A\x5\x14\v\x2\x99\x97\x3\x2\x2\x2\x9A\x9D\x3\x2\x2\x2\x9B\x99"+
		"\x3\x2\x2\x2\x9B\x9C\x3\x2\x2\x2\x9C\x9E\x3\x2\x2\x2\x9D\x9B\x3\x2\x2"+
		"\x2\x9E\x9F\b\n\x1\x2\x9F\x13\x3\x2\x2\x2\xA0\xA1\a\x14\x2\x2\xA1\xA2"+
		"\x5\x16\f\x2\xA2\xA3\b\v\x1\x2\xA3\xAB\x3\x2\x2\x2\xA4\xA5\a\x14\x2\x2"+
		"\xA5\xA6\x5\x18\r\x2\xA6\xA7\b\v\x1\x2\xA7\xAB\x3\x2\x2\x2\xA8\xA9\a\x1C"+
		"\x2\x2\xA9\xAB\b\v\x1\x2\xAA\xA0\x3\x2\x2\x2\xAA\xA4\x3\x2\x2\x2\xAA\xA8"+
		"\x3\x2\x2\x2\xAB\x15\x3\x2\x2\x2\xAC\xAD\a\x17\x2\x2\xAD\xAE\b\f\x1\x2"+
		"\xAE\x17\x3\x2\x2\x2\xAF\xB0\a\x18\x2\x2\xB0\xB1\b\r\x1\x2\xB1\x19\x3"+
		"\x2\x2\x2\xB2\xB3\a\x1B\x2\x2\xB3\xB4\a\x13\x2\x2\xB4\xB5\a\x1B\x2\x2"+
		"\xB5\xB6\x5\x1E\x10\x2\xB6\xB7\b\xE\x1\x2\xB7\xC9\x3\x2\x2\x2\xB8\xB9"+
		"\a\x13\x2\x2\xB9\xBA\a\x1B\x2\x2\xBA\xBB\x5\x1E\x10\x2\xBB\xBC\b\xE\x1"+
		"\x2\xBC\xC9\x3\x2\x2\x2\xBD\xBE\a\x1B\x2\x2\xBE\xBF\x5\x1E\x10\x2\xBF"+
		"\xC0\b\xE\x1\x2\xC0\xC9\x3\x2\x2\x2\xC1\xC2\a\x1B\x2\x2\xC2\xC3\a\x13"+
		"\x2\x2\xC3\xC4\a\x1B\x2\x2\xC4\xC9\b\xE\x1\x2\xC5\xC6\a\x13\x2\x2\xC6"+
		"\xC7\a\x1B\x2\x2\xC7\xC9\b\xE\x1\x2\xC8\xB2\x3\x2\x2\x2\xC8\xB8\x3\x2"+
		"\x2\x2\xC8\xBD\x3\x2\x2\x2\xC8\xC1\x3\x2\x2\x2\xC8\xC5\x3\x2\x2\x2\xC9"+
		"\x1B\x3\x2\x2\x2\xCA\xCB\a\x1B\x2\x2\xCB\xCC\b\xF\x1\x2\xCC\x1D\x3\x2"+
		"\x2\x2\xCD\xCE\a\x15\x2\x2\xCE\xCF\t\x3\x2\x2\xCF\xD0\a\x1B\x2\x2\xD0"+
		"\x1F\x3\x2\x2\x2\xD1\xD2\a\x1E\x2\x2\xD2\xD6\b\x11\x1\x2\xD3\xD4\a\x1F"+
		"\x2\x2\xD4\xD6\b\x11\x1\x2\xD5\xD1\x3\x2\x2\x2\xD5\xD3\x3\x2\x2\x2\xD6"+
		"!\x3\x2\x2\x2\xD7\xD8\a\x1D\x2\x2\xD8\xD9\b\x12\x1\x2\xD9#\x3\x2\x2\x2"+
		"\xDA\xDE\a\x19\x2\x2\xDB\xDC\a\x1A\x2\x2\xDC\xDE\b\x13\x1\x2\xDD\xDA\x3"+
		"\x2\x2\x2\xDD\xDB\x3\x2\x2\x2\xDE%\x3\x2\x2\x2\xDF\xE0\a#\x2\x2\xE0\xE4"+
		"\b\x14\x1\x2\xE1\xE2\a%\x2\x2\xE2\xE4\b\x14\x1\x2\xE3\xDF\x3\x2\x2\x2"+
		"\xE3\xE1\x3\x2\x2\x2\xE4\'\x3\x2\x2\x2\xF.;IW\x65w\x94\x9B\xAA\xC8\xD5"+
		"\xDD\xE3";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Transact.Query
